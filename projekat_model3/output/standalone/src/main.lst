1     	 0000					.public _INPUT_GAIN
2     	 0000					.public _INPUT_MODE0_C
3     	 0000					.public _INPUT_MODE0_LS
4     	 0000					.public _INPUT_MODE1_C
5     	 0000					.public _INPUT_MODE1_LS
6     	 0000					.public _centralOutput
7     	 0000					.public _data
8     	 0000					.public _decibels
9     	 0000					.public _dry
10    	 0000					.public _i
11    	 0000					.public _input_gain
12    	 0000					.public _j
13    	 0000					.public _k
14    	 0000					.public _leftOutput
15    	 0000					.public _lsOutput
16    	 0000					.public _mode_switch
17    	 0000					.public _outputMode
18    	 0000					.public _pEnd
19    	 0000					.public _rightOutput
20    	 0000					.public _rsOutput
21    	 0000					.public _sampleBuffer
22    	 0000					.public _tempBuffer
23    	 0000					.public _tmp
24    	 0000					.public _tmp1
25    	 0000					.public _val
26    	 0000					.public _audio_invert_init
27    	 0000					.extern _cl_wavread_bits_per_sample
28    	 0000					.extern _cl_wavread_close
29    	 0000					.extern _cl_wavread_frame_rate
30    	 0000					.extern _cl_wavread_number_of_frames
31    	 0000					.extern _cl_wavread_open
32    	 0000					.extern _cl_wavread_recvsample
33    	 0000					.extern _cl_wavwrite_close
34    	 0000					.extern _cl_wavwrite_open
35    	 0000					.extern _cl_wavwrite_sendsample
36    	 0000					.public _gst_audio_invert_transform
37    	 0000					.public _main
38    	 0000					.extern _printf
39    	 0000					.public _processing
40    	 0000					.extern _strcpy
41    	 0000					.extern __div
42    	 0000					.extern __int_to_laccum
43    	 0000					.extern __mul_sat_laccum
44    							.xdata_ovly
44     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
45    	 0000				_INPUT_GAIN
46    	 0000					.dw  (0x4026e73d)
	 0000	 4026E73D	 
47    							.xdata_ovly
47     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
48    	 0000				_INPUT_MODE0_C
49    	 0000					.dw  (0x71cf5471)
	 0000	 71CF5471	 
50    							.xdata_ovly
50     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
51    	 0000				_INPUT_MODE0_LS
52    	 0000					.dw  (0x144960c5)
	 0000	 144960C5	 
53    							.xdata_ovly
53     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
54    	 0000				_INPUT_MODE1_C
55    	 0000					.dw  (0x5a6703e0)
	 0000	 5A6703E0	 
56    							.xdata_ovly
56     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
57    	 0000				_INPUT_MODE1_LS
58    	 0000					.dw  (0x4026e73d)
	 0000	 4026E73D	 
59    							.xdata_ovly
59     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
60    	 0000				__extractedConst_0_1
61    	 0000					.dw  (0x7fdf3b64)
	 0000	 7FDF3B64	 
62    							.xdata_ovly
62     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
63    	 0000				__extractedConst_1_1
64    	 0000					.dw  (0x20c49c)
	 0000	 0020C49C	 
65    							.xdata_ovly
65     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
66    	 0000				__extractedConst_2_1
67    	 0000					.dw  (0xf3333333)
	 0000	 F3333333	 
68    							.xdata_ovly
68     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
69    	 0000				_centralOutput
70    	 0000					.bss (0x1)
71    							.xdata_ovly
71     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
72    	 0000				_data
73    	 0000					.bss (0x3)
74    							.xdata_ovly
74     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
75    	 0000				_decibels
76    	 0000					.bss (0x32)
77    							.xdata_ovly
77     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
78    	 0000				_dry
79    	 0000					.bss (0x1)
80    							.xdata_ovly
80     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
81    	 0000				_i
82    	 0000					.bss (0x1)
83    							.xdata_ovly
83     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
84    	 0000				_input_gain
85    	 0000					.bss (0x1)
86    							.xdata_ovly
86     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
87    	 0000				_j
88    	 0000					.bss (0x1)
89    							.xdata_ovly
89     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
90    	 0000				_k
91    	 0000					.bss (0x1)
92    							.xdata_ovly
92     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
93    	 0000				_leftOutput
94    	 0000					.bss (0x1)
95    							.xdata_ovly
95     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
96    	 0000				_lsOutput
97    	 0000					.bss (0x1)
98    							.xdata_ovly
98     >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
99    	 0000				_mode_switch
100   	 0000					.dw  (0x1)
	 0000	 00000001	 
101   							.xdata_ovly
101    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
102   	 0000				_outputMode
103   	 0000					.dw  (0x3)
	 0000	 00000003	 
104   							.xdata_ovly
104    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
105   	 0000				_pEnd
106   	 0000					.bss (0x1)
107   							.xdata_ovly
107    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
108   	 0000				_rightOutput
109   	 0000					.bss (0x1)
110   							.xdata_ovly
110    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
111   	 0000				_rsOutput
112   	 0000					.bss (0x1)
113   							.xdata_ovly
113    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
114   	 0000				_sampleBuffer
115   	 0000					.bss (0x80)
116   							.xdata_ovly
116    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
117   	 0000				_string_const_0
118   	 0000					.dw  (0x43)
	 0000	 00000043	 
119   	 0001					.dw  (0x3a)
	 0001	 0000003A	 
120   	 0002					.dw  (0x2f)
	 0002	 0000002F	 
121   	 0003					.dw  (0x55)
	 0003	 00000055	 
122   	 0004					.dw  (0x73)
	 0004	 00000073	 
123   	 0005					.dw  (0x65)
	 0005	 00000065	 
124   	 0006					.dw  (0x72)
	 0006	 00000072	 
125   	 0007					.dw  (0x73)
	 0007	 00000073	 
126   	 0008					.dw  (0x2f)
	 0008	 0000002F	 
127   	 0009					.dw  (0x66)
	 0009	 00000066	 
128   	 000A					.dw  (0x69)
	 000A	 00000069	 
129   	 000B					.dw  (0x6c)
	 000B	 0000006C	 
130   	 000C					.dw  (0x69)
	 000C	 00000069	 
131   	 000D					.dw  (0x2f)
	 000D	 0000002F	 
132   	 000E					.dw  (0x44)
	 000E	 00000044	 
133   	 000F					.dw  (0x65)
	 000F	 00000065	 
134   	 0010					.dw  (0x73)
	 0010	 00000073	 
135   	 0011					.dw  (0x6b)
	 0011	 0000006B	 
136   	 0012					.dw  (0x74)
	 0012	 00000074	 
137   	 0013					.dw  (0x6f)
	 0013	 0000006F	 
138   	 0014					.dw  (0x70)
	 0014	 00000070	 
139   	 0015					.dw  (0x2f)
	 0015	 0000002F	 
140   	 0016					.dw  (0x41)
	 0016	 00000041	 
141   	 0017					.dw  (0x41)
	 0017	 00000041	 
142   	 0018					.dw  (0x44)
	 0018	 00000044	 
143   	 0019					.dw  (0x53)
	 0019	 00000053	 
144   	 001A					.dw  (0x50)
	 001A	 00000050	 
145   	 001B					.dw  (0x32)
	 001B	 00000032	 
146   	 001C					.dw  (0x2f)
	 001C	 0000002F	 
147   	 001D					.dw  (0x70)
	 001D	 00000070	 
148   	 001E					.dw  (0x72)
	 001E	 00000072	 
149   	 001F					.dw  (0x6f)
	 001F	 0000006F	 
150   	 0020					.dw  (0x6a)
	 0020	 0000006A	 
151   	 0021					.dw  (0x65)
	 0021	 00000065	 
152   	 0022					.dw  (0x6b)
	 0022	 0000006B	 
153   	 0023					.dw  (0x61)
	 0023	 00000061	 
154   	 0024					.dw  (0x74)
	 0024	 00000074	 
155   	 0025					.dw  (0x5f)
	 0025	 0000005F	 
156   	 0026					.dw  (0x6d)
	 0026	 0000006D	 
157   	 0027					.dw  (0x6f)
	 0027	 0000006F	 
158   	 0028					.dw  (0x64)
	 0028	 00000064	 
159   	 0029					.dw  (0x65)
	 0029	 00000065	 
160   	 002A					.dw  (0x6c)
	 002A	 0000006C	 
161   	 002B					.dw  (0x33)
	 002B	 00000033	 
162   	 002C					.dw  (0x2f)
	 002C	 0000002F	 
163   	 002D					.dw  (0x73)
	 002D	 00000073	 
164   	 002E					.dw  (0x70)
	 002E	 00000070	 
165   	 002F					.dw  (0x65)
	 002F	 00000065	 
166   	 0030					.dw  (0x65)
	 0030	 00000065	 
167   	 0031					.dw  (0x63)
	 0031	 00000063	 
168   	 0032					.dw  (0x68)
	 0032	 00000068	 
169   	 0033					.dw  (0x5f)
	 0033	 0000005F	 
170   	 0034					.dw  (0x32)
	 0034	 00000032	 
171   	 0035					.dw  (0x63)
	 0035	 00000063	 
172   	 0036					.dw  (0x68)
	 0036	 00000068	 
173   	 0037					.dw  (0x5f)
	 0037	 0000005F	 
174   	 0038					.dw  (0x32)
	 0038	 00000032	 
175   	 0039					.dw  (0x2e)
	 0039	 0000002E	 
176   	 003A					.dw  (0x77)
	 003A	 00000077	 
177   	 003B					.dw  (0x61)
	 003B	 00000061	 
178   	 003C					.dw  (0x76)
	 003C	 00000076	 
179   	 003D					.dw  (0x0)
	 003D	 00000000	 
180   							.xdata_ovly
180    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
181   	 0000				_string_const_1
182   	 0000					.dw  (0x45)
	 0000	 00000045	 
183   	 0001					.dw  (0x72)
	 0001	 00000072	 
184   	 0002					.dw  (0x72)
	 0002	 00000072	 
185   	 0003					.dw  (0x6f)
	 0003	 0000006F	 
186   	 0004					.dw  (0x72)
	 0004	 00000072	 
187   	 0005					.dw  (0x3a)
	 0005	 0000003A	 
188   	 0006					.dw  (0x20)
	 0006	 00000020	 
189   	 0007					.dw  (0x43)
	 0007	 00000043	 
190   	 0008					.dw  (0x6f)
	 0008	 0000006F	 
191   	 0009					.dw  (0x75)
	 0009	 00000075	 
192   	 000A					.dw  (0x6c)
	 000A	 0000006C	 
193   	 000B					.dw  (0x64)
	 000B	 00000064	 
194   	 000C					.dw  (0x20)
	 000C	 00000020	 
195   	 000D					.dw  (0x6e)
	 000D	 0000006E	 
196   	 000E					.dw  (0x6f)
	 000E	 0000006F	 
197   	 000F					.dw  (0x74)
	 000F	 00000074	 
198   	 0010					.dw  (0x20)
	 0010	 00000020	 
199   	 0011					.dw  (0x6f)
	 0011	 0000006F	 
200   	 0012					.dw  (0x70)
	 0012	 00000070	 
201   	 0013					.dw  (0x65)
	 0013	 00000065	 
202   	 0014					.dw  (0x6e)
	 0014	 0000006E	 
203   	 0015					.dw  (0x20)
	 0015	 00000020	 
204   	 0016					.dw  (0x69)
	 0016	 00000069	 
205   	 0017					.dw  (0x6e)
	 0017	 0000006E	 
206   	 0018					.dw  (0x70)
	 0018	 00000070	 
207   	 0019					.dw  (0x75)
	 0019	 00000075	 
208   	 001A					.dw  (0x74)
	 001A	 00000074	 
209   	 001B					.dw  (0x20)
	 001B	 00000020	 
210   	 001C					.dw  (0x77)
	 001C	 00000077	 
211   	 001D					.dw  (0x61)
	 001D	 00000061	 
212   	 001E					.dw  (0x76)
	 001E	 00000076	 
213   	 001F					.dw  (0x65)
	 001F	 00000065	 
214   	 0020					.dw  (0x66)
	 0020	 00000066	 
215   	 0021					.dw  (0x69)
	 0021	 00000069	 
216   	 0022					.dw  (0x6c)
	 0022	 0000006C	 
217   	 0023					.dw  (0x65)
	 0023	 00000065	 
218   	 0024					.dw  (0x2e)
	 0024	 0000002E	 
219   	 0025					.dw  (0xa)
	 0025	 0000000A	 
220   	 0026					.dw  (0x0)
	 0026	 00000000	 
221   							.xdata_ovly
221    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
222   	 0000				_string_const_2
223   	 0000					.dw  (0x43)
	 0000	 00000043	 
224   	 0001					.dw  (0x3a)
	 0001	 0000003A	 
225   	 0002					.dw  (0x2f)
	 0002	 0000002F	 
226   	 0003					.dw  (0x55)
	 0003	 00000055	 
227   	 0004					.dw  (0x73)
	 0004	 00000073	 
228   	 0005					.dw  (0x65)
	 0005	 00000065	 
229   	 0006					.dw  (0x72)
	 0006	 00000072	 
230   	 0007					.dw  (0x73)
	 0007	 00000073	 
231   	 0008					.dw  (0x2f)
	 0008	 0000002F	 
232   	 0009					.dw  (0x66)
	 0009	 00000066	 
233   	 000A					.dw  (0x69)
	 000A	 00000069	 
234   	 000B					.dw  (0x6c)
	 000B	 0000006C	 
235   	 000C					.dw  (0x69)
	 000C	 00000069	 
236   	 000D					.dw  (0x2f)
	 000D	 0000002F	 
237   	 000E					.dw  (0x44)
	 000E	 00000044	 
238   	 000F					.dw  (0x65)
	 000F	 00000065	 
239   	 0010					.dw  (0x73)
	 0010	 00000073	 
240   	 0011					.dw  (0x6b)
	 0011	 0000006B	 
241   	 0012					.dw  (0x74)
	 0012	 00000074	 
242   	 0013					.dw  (0x6f)
	 0013	 0000006F	 
243   	 0014					.dw  (0x70)
	 0014	 00000070	 
244   	 0015					.dw  (0x2f)
	 0015	 0000002F	 
245   	 0016					.dw  (0x41)
	 0016	 00000041	 
246   	 0017					.dw  (0x41)
	 0017	 00000041	 
247   	 0018					.dw  (0x44)
	 0018	 00000044	 
248   	 0019					.dw  (0x53)
	 0019	 00000053	 
249   	 001A					.dw  (0x50)
	 001A	 00000050	 
250   	 001B					.dw  (0x32)
	 001B	 00000032	 
251   	 001C					.dw  (0x2f)
	 001C	 0000002F	 
252   	 001D					.dw  (0x70)
	 001D	 00000070	 
253   	 001E					.dw  (0x72)
	 001E	 00000072	 
254   	 001F					.dw  (0x6f)
	 001F	 0000006F	 
255   	 0020					.dw  (0x6a)
	 0020	 0000006A	 
256   	 0021					.dw  (0x65)
	 0021	 00000065	 
257   	 0022					.dw  (0x6b)
	 0022	 0000006B	 
258   	 0023					.dw  (0x61)
	 0023	 00000061	 
259   	 0024					.dw  (0x74)
	 0024	 00000074	 
260   	 0025					.dw  (0x5f)
	 0025	 0000005F	 
261   	 0026					.dw  (0x6d)
	 0026	 0000006D	 
262   	 0027					.dw  (0x6f)
	 0027	 0000006F	 
263   	 0028					.dw  (0x64)
	 0028	 00000064	 
264   	 0029					.dw  (0x65)
	 0029	 00000065	 
265   	 002A					.dw  (0x6c)
	 002A	 0000006C	 
266   	 002B					.dw  (0x33)
	 002B	 00000033	 
267   	 002C					.dw  (0x2f)
	 002C	 0000002F	 
268   	 002D					.dw  (0x6f)
	 002D	 0000006F	 
269   	 002E					.dw  (0x75)
	 002E	 00000075	 
270   	 002F					.dw  (0x74)
	 002F	 00000074	 
271   	 0030					.dw  (0x70)
	 0030	 00000070	 
272   	 0031					.dw  (0x75)
	 0031	 00000075	 
273   	 0032					.dw  (0x74)
	 0032	 00000074	 
274   	 0033					.dw  (0x2d)
	 0033	 0000002D	 
275   	 0034					.dw  (0x6d)
	 0034	 0000006D	 
276   	 0035					.dw  (0x6f)
	 0035	 0000006F	 
277   	 0036					.dw  (0x64)
	 0036	 00000064	 
278   	 0037					.dw  (0x65)
	 0037	 00000065	 
279   	 0038					.dw  (0x6c)
	 0038	 0000006C	 
280   	 0039					.dw  (0x33)
	 0039	 00000033	 
281   	 003A					.dw  (0x2d)
	 003A	 0000002D	 
282   	 003B					.dw  (0x33)
	 003B	 00000033	 
283   	 003C					.dw  (0x32)
	 003C	 00000032	 
284   	 003D					.dw  (0x30)
	 003D	 00000030	 
285   	 003E					.dw  (0x2e)
	 003E	 0000002E	 
286   	 003F					.dw  (0x77)
	 003F	 00000077	 
287   	 0040					.dw  (0x61)
	 0040	 00000061	 
288   	 0041					.dw  (0x76)
	 0041	 00000076	 
289   	 0042					.dw  (0x0)
	 0042	 00000000	 
290   							.xdata_ovly
290    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
291   	 0000				_string_const_3
292   	 0000					.dw  (0x45)
	 0000	 00000045	 
293   	 0001					.dw  (0x72)
	 0001	 00000072	 
294   	 0002					.dw  (0x72)
	 0002	 00000072	 
295   	 0003					.dw  (0x6f)
	 0003	 0000006F	 
296   	 0004					.dw  (0x72)
	 0004	 00000072	 
297   	 0005					.dw  (0x3a)
	 0005	 0000003A	 
298   	 0006					.dw  (0x20)
	 0006	 00000020	 
299   	 0007					.dw  (0x43)
	 0007	 00000043	 
300   	 0008					.dw  (0x6f)
	 0008	 0000006F	 
301   	 0009					.dw  (0x75)
	 0009	 00000075	 
302   	 000A					.dw  (0x6c)
	 000A	 0000006C	 
303   	 000B					.dw  (0x64)
	 000B	 00000064	 
304   	 000C					.dw  (0x20)
	 000C	 00000020	 
305   	 000D					.dw  (0x6e)
	 000D	 0000006E	 
306   	 000E					.dw  (0x6f)
	 000E	 0000006F	 
307   	 000F					.dw  (0x74)
	 000F	 00000074	 
308   	 0010					.dw  (0x20)
	 0010	 00000020	 
309   	 0011					.dw  (0x6f)
	 0011	 0000006F	 
310   	 0012					.dw  (0x70)
	 0012	 00000070	 
311   	 0013					.dw  (0x65)
	 0013	 00000065	 
312   	 0014					.dw  (0x6e)
	 0014	 0000006E	 
313   	 0015					.dw  (0x20)
	 0015	 00000020	 
314   	 0016					.dw  (0x6f)
	 0016	 0000006F	 
315   	 0017					.dw  (0x75)
	 0017	 00000075	 
316   	 0018					.dw  (0x74)
	 0018	 00000074	 
317   	 0019					.dw  (0x70)
	 0019	 00000070	 
318   	 001A					.dw  (0x75)
	 001A	 00000075	 
319   	 001B					.dw  (0x74)
	 001B	 00000074	 
320   	 001C					.dw  (0x20)
	 001C	 00000020	 
321   	 001D					.dw  (0x77)
	 001D	 00000077	 
322   	 001E					.dw  (0x61)
	 001E	 00000061	 
323   	 001F					.dw  (0x76)
	 001F	 00000076	 
324   	 0020					.dw  (0x65)
	 0020	 00000065	 
325   	 0021					.dw  (0x66)
	 0021	 00000066	 
326   	 0022					.dw  (0x69)
	 0022	 00000069	 
327   	 0023					.dw  (0x6c)
	 0023	 0000006C	 
328   	 0024					.dw  (0x65)
	 0024	 00000065	 
329   	 0025					.dw  (0x2e)
	 0025	 0000002E	 
330   	 0026					.dw  (0xa)
	 0026	 0000000A	 
331   	 0027					.dw  (0x0)
	 0027	 00000000	 
332   							.xdata_ovly
332    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
333   	 0000				_tempBuffer
334   	 0000					.bss (0x80)
335   							.xdata_ovly
335    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
336   	 0000				_tmp
337   	 0000					.bss (0x1)
338   							.xdata_ovly
338    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
339   	 0000				_tmp1
340   	 0000					.dw  (0x40000000)
	 0000	 40000000	 
341   							.xdata_ovly
341    >> start of macro: .xdata_ovly
1+    									seg_single , "X_OVLY", X
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_X_ )
2+    						    segment
3+    						  .else
4+    						    segment "X_OVLY"
5+    							.if "" != ""
6+    						___SegStart_X_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .xdata_ovly
342   	 0000				_val
343   	 0000					.bss (0x3)
344   							.code_ovly
344    >> start of macro: .code_ovly
1+    									seg_single , "CODE_OVLY", CODE
1+     >> start of macro: seg_single
1+    						  .if ( "" != "" ) & defined( ___SegStart_CODE_ )
2+    						    segment
3+    						  .else
4+    						    segment "CODE_OVLY"
5+    							.if "" != ""
6+    						___SegStart_CODE_
7+    							.endif
8+    						  .endif
9+    							#RememberSegmentType
10+    >> end of macro: seg_single
2+     >> end of macro: .code_ovly
345   						
346   						
347   						
348   	 0000				_audio_invert_init:			/* LN: 16 | CYCLE: 0 | RULES: () */ 
349   	 0000	 BB540007		xmem[i7] = i7			# LN: 16 | 
350   	 0001	 020F7FFF		i7 += 1			# LN: 16 | 
351   	 0002				cline_16_0:			/* LN: 18 | CYCLE: 0 | RULES: () */ 
352   	 0002	 00004DC0		a0 = 0			# LN: 18 | 
353   	 0003	 98440000		xmem[_data + 0] = a0h			# LN: 18 | 
354   	 0004				cline_18_0:			/* LN: 19 | CYCLE: 0 | RULES: () */ 
355   	 0004	 88040000		a0 = xmem[__extractedConst_2_1 + 0]			# LN: 19 | 
356   	 0005	 98440001		xmem[_data + 1] = a0h			# LN: 19 | 
357   	 0006				cline_19_0:			/* LN: 20 | CYCLE: 0 | RULES: () */ 
358   	 0006	 80080007		jmp (__epilogue_220)			# LN: 20 | 
359   	 0007				__epilogue_220:			/* LN: 20 | CYCLE: 0 | RULES: () */ 
360   	 0007	 02177FFF		i7 -= 1			# LN: 20 | 
361   	 0008	 81880000		ret			# LN: 20 | 
362   						
363   						
364   						
365   	 0009				_gst_audio_invert_transform:			/* LN: 21 | CYCLE: 0 | RULES: () */ 
366   	 0009	 BB540007		xmem[i7] = i7			# LN: 21 | 
367   	 000A	 020F7FFF		i7 += 1			# LN: 21 | 
368   	 000B	 87750004		i7 = i7 + (0x4)			# LN: 21 | 
369   	 000C	 94750001		i4 = i7 - (0x1)			# LN: 21 | 
370   	 000D	 B0540004		xmem[i4] = i0			# LN: 21 | 
371   	 000E	 90750002		i0 = i7 - (0x2)			# LN: 21 | 
372   	 000F	 B1540000		xmem[i0] = i1			# LN: 21 | 
373   	 0010				cline_21_0:			/* LN: 24 | CYCLE: 0 | RULES: () */ 
374   	 0010	 88040000		a0 = xmem[_data + 0]			# LN: 24 | 
375   	 0011	 89040000		a1 = xmem[__extractedConst_0_1 + 0]			# LN: 24 | 
376   	 0012	 000044C0		a0 = a1 - a0			# LN: 24 | 
377   	 0013	 90750003		i0 = i7 - (0x3)			# LN: 24 | 
378   	 0014	 98540000		xmem[i0] = a0h			# LN: 24 | 
379   	 0015				cline_24_0:			/* LN: 25 | CYCLE: 0 | RULES: () */ 
380   	 0015	 90750003		i0 = i7 - (0x3)			# LN: 25 | 
381   	 0016	 88140000		a0 = xmem[i0]			# LN: 25 | 
382   	 0017	 89040000		a1 = xmem[__extractedConst_1_1 + 0]			# LN: 25 | 
383   	 0018	 00004408		a0 = a0 + a1			# LN: 25 | 
384   	 0019	 90750003		i0 = i7 - (0x3)			# LN: 25 | 
385   	 001A	 98540000		xmem[i0] = a0h			# LN: 25 | 
386   	 001B				cline_25_0:			/* LN: 28 | CYCLE: 0 | RULES: () */ 
387   	 001B	 90750004		i0 = i7 - (0x4)			# LN: 28 | 
388   	 001C	 00004DC0		a0 = 0			# LN: 28 | 
389   	 001D	 98540000		xmem[i0] = a0h			# LN: 28 | 
390   	 001E	 8100004C		do (0x10), label_end_92			# LN: 28 | 
391   	 001F				cline_28_0:			/* LN: 30 | CYCLE: 0 | RULES: () */ 
392   	 001F				label_begin_92:			/* LN: 28 | CYCLE: 0 | RULES: () */ 
393   	 001F	 90750001		i0 = i7 - (0x1)			# LN: 30 | 
394   	 0020	 B0140000		i0 = xmem[i0]			# LN: 30 | 
395   	 0021	 88040000		a0 = xmem[_tmp1 + 0]			# LN: 30 | 
396   	 0022	 89940000		a1 = ymem[i0]			# LN: 30 | 
397   	 0023	 00004E41		a1 = a1 >> 1			# LN: 30 | 
398   	 0024	 00004408		a0 = a0 + a1			# LN: 30 | 
399   	 0025	 98440000		xmem[_tmp + 0] = a0h			# LN: 30 | 
400   	 0026				cline_30_0:			/* LN: 31 | CYCLE: 0 | RULES: () */ 
401   	 0026	 90750001		i0 = i7 - (0x1)			# LN: 31 | 
402   	 0027	 B0140000		i0 = xmem[i0]			# LN: 31 | 
403   	 0028	 91750003		i1 = i7 - (0x3)			# LN: 31 | 
404   	 0029	 88940000		a0 = ymem[i0]			# LN: 31 | 
405   	 002A	 10414E40		x0 = xmem[i1]; a0 = a0 >> 1			# LN: 31, 31 | 
406   	 002B	 01587FFF		x1 = a0h			# LN: 31 | 
407   	 002C	 00002020		a0 = x1 * x0			# LN: 31 | 
408   	 002D	 80040000		x0 = xmem[_data + 0]			# LN: 31 | 
409   	 002E	 81040000		x1 = xmem[_tmp + 0]			# LN: 31 | 
410   	 002F	 00002038		a0 -= x1 * x0			# LN: 31 | 
411   	 0030	 A0440000		xmem[_val + 0] = a0g			# LN: 31 | 
412   	 0031	 98440001		xmem[_val + 1] = a0h			# LN: 31 | 
413   	 0032	 90440002		xmem[_val + 2] = a0l			# LN: 31 | 
414   	 0033				cline_31_0:			/* LN: 32 | CYCLE: 0 | RULES: () */ 
415   	 0033	 90750001		i0 = i7 - (0x1)			# LN: 32 | 
416   	 0034	 B0140000		i0 = xmem[i0]			# LN: 32 | 
417   	 0035	 91750001		i1 = i7 - (0x1)			# LN: 32 | 
418   	 0036	 02087FFF		i0 += 1			# LN: 32 | 
419   	 0037	 B0540001		xmem[i1] = i0			# LN: 32 | 
420   	 0038				cline_32_0:			/* LN: 33 | CYCLE: 0 | RULES: () */ 
421   	 0038	 A0040000		a0g = xmem[_val + 0]			# LN: 33 | 
422   	 0039	 98040001		a0h = xmem[_val + 1]			# LN: 33 | 
423   	 003A	 90040002		a0l = xmem[_val + 2]			# LN: 33 | 
424   	 003B	 48407FFF		x0 = a0			# LN: 33 | 
425   	 003C	 81040001		x1 = xmem[_data + 1]			# LN: 33 | 
426   	 003D	 00002080		a0 = x0 * x1			# LN: 33 | 
427   	 003E	 90750002		i0 = i7 - (0x2)			# LN: 33 | 
428   	 003F	 B0140000		i0 = xmem[i0]			# LN: 33 | 
429   	 0040	 00004E00		a0 = a0 << 1			# LN: 33 | 
430   	 0041	 88D40000		ymem[i0] = a0			# LN: 33 | 
431   	 0042				cline_33_0:			/* LN: 34 | CYCLE: 0 | RULES: () */ 
432   	 0042	 90750002		i0 = i7 - (0x2)			# LN: 34 | 
433   	 0043	 B0140000		i0 = xmem[i0]			# LN: 34 | 
434   	 0044	 91750002		i1 = i7 - (0x2)			# LN: 34 | 
435   	 0045	 02087FFF		i0 += 1			# LN: 34 | 
436   	 0046	 B0540001		xmem[i1] = i0			# LN: 34 | 
437   	 0047				cline_34_0:			/* LN: 28 | CYCLE: 0 | RULES: () */ 
438   	 0047				init_latch_label_0:			/* LN: 35 | CYCLE: 0 | RULES: () */ 
439   	 0047	 90750004		i0 = i7 - (0x4)			# LN: 28 | 
440   	 0048	 88140000		a0 = xmem[i0]			# LN: 28 | 
441   	 0049	 894A0001		uhalfword(a1) = (0x1)			# LN: 28 | 
442   	 004A	 00004408		a0 = a0 + a1			# LN: 28 | 
443   	 004B	 90750004		i0 = i7 - (0x4)			# LN: 28 | 
444   	 004C				label_end_92:			# LN: 28 | CYCLE: 5 | RULES: ()
445   	 004C	 98540000		xmem[i0] = a0h			# LN: 28 | 
446   	 004D				cline_28_1:			/* LN: 37 | CYCLE: 0 | RULES: () */ 
447   	 004D				for_end_0:			/* LN: 28 | CYCLE: 0 | RULES: () */ 
448   	 004D	 8008004E		jmp (__epilogue_222)			# LN: 37 | 
449   	 004E				__epilogue_222:			/* LN: 37 | CYCLE: 0 | RULES: () */ 
450   	 004E	 97750004		i7 = i7 - (0x4)			# LN: 37 | 
451   	 004F	 02177FFF		i7 -= 1			# LN: 37 | 
452   	 0050	 81880000		ret			# LN: 37 | 
453   						
454   						
455   						
456   							# This construction should ensure linking of crt0 in case when target is a standalone program without the OS
457   							.if defined(_OVLY_)
458   								.if .strcmp('standalone',_OVLY_)=0
459   								.if .strcmp('crystal32',_TARGET_FAMILY_)=0
460   	 0000							.extern __start         # dummy use of __start to force linkage of crt0
461   	 0000				dummy		.equ(__start)
462   								.else
463   									.extern __intvec         # dummy use of __intvec to force linkage of intvec
464   						dummy		.equ(__intvec)
465   								.endif
466   								.endif
467   							.endif
468   						
469   	 0051				_main:			/* LN: 310 | CYCLE: 0 | RULES: () */ 
470   	 0051	 BB540007		xmem[i7] = i7			# LN: 310 | 
471   	 0052	 020F7FFF		i7 += 1			# LN: 310 | 
472   	 0053	 8775020C		i7 = i7 + (0x20c)			# LN: 310 | 
473   	 0054	 91750001		i1 = i7 - (0x1)			# LN: 310 | 
474   	 0055	 98540001		xmem[i1] = a0h			# LN: 310 | 
475   	 0056	 91750002		i1 = i7 - (0x2)			# LN: 310 | 
476   	 0057	 B0540001		xmem[i1] = i0			# LN: 310 | 
477   	 0058				cline_310_0:			/* LN: 324 | CYCLE: 0 | RULES: () */ 
478   	 0058	 90750102		i0 = i7 - (258 - 0)			# LN: 324 | 
479   	 0059	 A1050000		i1 = (0) + (_string_const_0)			# LN: 324 | 
480   	 005A	 80880000		call (_strcpy)			# LN: 324 | 
481   	 005B				cline_324_0:			/* LN: 325 | CYCLE: 0 | RULES: () */ 
482   	 005B	 90750102		i0 = i7 - (258 - 0)			# LN: 325 | 
483   	 005C	 80880000		call (_cl_wavread_open)			# LN: 325 | 
484   	 005D	 98090030		AnyReg(i0, a0h)			# LN: 325 | 
485   	 005E	 91750103		i1 = i7 - (0x103)			# LN: 325 | 
486   	 005F	 B0540001		xmem[i1] = i0			# LN: 325 | 
487   	 0060				cline_325_0:			/* LN: 326 | CYCLE: 0 | RULES: () */ 
488   	 0060	 90750103		i0 = i7 - (0x103)			# LN: 326 | 
489   	 0061	 88140000		a0 = xmem[i0]			# LN: 326 | 
490   	 0062	 00004E80		a0 & a0			# LN: 326 | 
491   	 0063	 84480068		if (a != 0) jmp (else_0)			# LN: 326 | 
492   	 0064				cline_326_0:			/* LN: 328 | CYCLE: 0 | RULES: () */ 
493   	 0064	 A0050000		i0 = (0) + (_string_const_1)			# LN: 328 | 
494   	 0065	 80880000		call (_printf)			# LN: 328 | 
495   	 0066				cline_328_0:			/* LN: 329 | CYCLE: 0 | RULES: () */ 
496   	 0066	 886AFFFF		halfword(a0) = (0xffff)			# LN: 329 | 
497   	 0067	 800800F8		jmp (__epilogue_226)			# LN: 329 | 
498   	 0068				cline_329_0:			/* LN: 335 | CYCLE: 0 | RULES: () */ 
499   	 0068				endif_0:			/* LN: 326 | CYCLE: 0 | RULES: () */ 
500   	 0068				else_0:			/* LN: 326 | CYCLE: 0 | RULES: () */ 
501   	 0068	 90750103		i0 = i7 - (0x103)			# LN: 335 | 
502   	 0069	 B0140000		i0 = xmem[i0]			# LN: 335 | 
503   	 006A	 80880000		call (_cl_wavread_bits_per_sample)			# LN: 335 | 
504   	 006B	 90750104		i0 = i7 - (0x104)			# LN: 335 | 
505   	 006C	 98540000		xmem[i0] = a0h			# LN: 335 | 
506   	 006D				cline_335_0:			/* LN: 336 | CYCLE: 0 | RULES: () */ 
507   	 006D	 90750103		i0 = i7 - (0x103)			# LN: 336 | 
508   	 006E	 B0140000		i0 = xmem[i0]			# LN: 336 | 
509   	 006F	 80880000		call (_cl_wavread_frame_rate)			# LN: 336 | 
510   	 0070	 90750105		i0 = i7 - (0x105)			# LN: 336 | 
511   	 0071	 98540000		xmem[i0] = a0h			# LN: 336 | 
512   	 0072				cline_336_0:			/* LN: 337 | CYCLE: 0 | RULES: () */ 
513   	 0072	 90750103		i0 = i7 - (0x103)			# LN: 337 | 
514   	 0073	 B0140000		i0 = xmem[i0]			# LN: 337 | 
515   	 0074	 80880000		call (_cl_wavread_number_of_frames)			# LN: 337 | 
516   	 0075	 90750106		i0 = i7 - (0x106)			# LN: 337 | 
517   	 0076	 98540000		xmem[i0] = a0h			# LN: 337 | 
518   	 0077				cline_337_0:			/* LN: 342 | CYCLE: 0 | RULES: () */ 
519   	 0077	 90750206		i0 = i7 - (518 - 0)			# LN: 342 | 
520   	 0078	 A1050000		i1 = (0) + (_string_const_2)			# LN: 342 | 
521   	 0079	 80880000		call (_strcpy)			# LN: 342 | 
522   	 007A				cline_342_0:			/* LN: 343 | CYCLE: 0 | RULES: () */ 
523   	 007A	 90750206		i0 = i7 - (518 - 0)			# LN: 343 | 
524   	 007B	 91750104		i1 = i7 - (0x104)			# LN: 343 | 
525   	 007C	 88140001		a0 = xmem[i1]			# LN: 343 | 
526   	 007D	 894A0005		uhalfword(a1) = (0x5)			# LN: 343 | 
527   	 007E	 91750105		i1 = i7 - (0x105)			# LN: 343 | 
528   	 007F	 8C140001		b0 = xmem[i1]			# LN: 343 | 
529   	 0080	 80880000		call (_cl_wavwrite_open)			# LN: 343 | 
530   	 0081	 98090030		AnyReg(i0, a0h)			# LN: 343 | 
531   	 0082	 91750207		i1 = i7 - (0x207)			# LN: 343 | 
532   	 0083	 B0540001		xmem[i1] = i0			# LN: 343 | 
533   	 0084				cline_343_0:			/* LN: 344 | CYCLE: 0 | RULES: () */ 
534   	 0084	 90750207		i0 = i7 - (0x207)			# LN: 344 | 
535   	 0085	 88140000		a0 = xmem[i0]			# LN: 344 | 
536   	 0086	 00004E80		a0 & a0			# LN: 344 | 
537   	 0087	 8448008C		if (a != 0) jmp (else_1)			# LN: 344 | 
538   	 0088				cline_344_0:			/* LN: 346 | CYCLE: 0 | RULES: () */ 
539   	 0088	 A0050000		i0 = (0) + (_string_const_3)			# LN: 346 | 
540   	 0089	 80880000		call (_printf)			# LN: 346 | 
541   	 008A				cline_346_0:			/* LN: 347 | CYCLE: 0 | RULES: () */ 
542   	 008A	 886AFFFF		halfword(a0) = (0xffff)			# LN: 347 | 
543   	 008B	 800800F8		jmp (__epilogue_226)			# LN: 347 | 
544   	 008C				cline_347_0:			/* LN: 354 | CYCLE: 0 | RULES: () */ 
545   	 008C				endif_1:			/* LN: 344 | CYCLE: 0 | RULES: () */ 
546   	 008C				else_1:			/* LN: 344 | CYCLE: 0 | RULES: () */ 
547   	 008C	 80880000		call (_audio_invert_init)			# LN: 354 | 
548   	 008D				cline_354_0:			/* LN: 365 | CYCLE: 0 | RULES: () */ 
549   	 008D	 90750106		i0 = i7 - (0x106)			# LN: 365 | 
550   	 008E	 88140000		a0 = xmem[i0]			# LN: 365 | 
551   	 008F	 894A0010		uhalfword(a1) = (0x10)			# LN: 365 | 
552   	 0090	 80880000		call (__div)			# LN: 365 | 
553   	 0091	 90750208		i0 = i7 - (0x208)			# LN: 365 | 
554   	 0092	 98540000		xmem[i0] = a0h			# LN: 365 | 
555   	 0093				cline_365_0:			/* LN: 367 | CYCLE: 0 | RULES: () */ 
556   	 0093	 90750209		i0 = i7 - (0x209)			# LN: 367 | 
557   	 0094	 00004DC0		a0 = 0			# LN: 367 | 
558   	 0095	 98540000		xmem[i0] = a0h			# LN: 367 | 
559   	 0096				for_9:			/* LN: 367 | CYCLE: 0 | RULES: () */ 
560   	 0096	 90750209		i0 = i7 - (0x209)			# LN: 367 | 
561   	 0097	 88140000		a0 = xmem[i0]			# LN: 367 | 
562   	 0098	 90750208		i0 = i7 - (0x208)			# LN: 367 | 
563   	 0099	 89140000		a1 = xmem[i0]			# LN: 367 | 
564   	 009A	 00004F08		a0 - a1			# LN: 367 | 
565   	 009B	 84C800F0		if (a >= 0) jmp (for_end_9)			# LN: 367 | 
566   	 009C				cline_367_0:			/* LN: 369 | CYCLE: 0 | RULES: () */ 
567   	 009C	 9075020A		i0 = i7 - (0x20a)			# LN: 369 | 
568   	 009D	 00004DC0		a0 = 0			# LN: 369 | 
569   	 009E	 98540000		xmem[i0] = a0h			# LN: 369 | 
570   	 009F	 810000C1		do (0x10), label_end_94			# LN: 369 | 
571   	 00A0				cline_369_0:			/* LN: 371 | CYCLE: 0 | RULES: () */ 
572   	 00A0				label_begin_94:			/* LN: 369 | CYCLE: 0 | RULES: () */ 
573   	 00A0	 9075020B		i0 = i7 - (0x20b)			# LN: 371 | 
574   	 00A1	 00004DC0		a0 = 0			# LN: 371 | 
575   	 00A2	 98540000		xmem[i0] = a0h			# LN: 371 | 
576   	 00A3	 805000BB		do (0x5), label_end_93			# LN: 371 | 
577   	 00A4				cline_371_0:			/* LN: 373 | CYCLE: 0 | RULES: () */ 
578   	 00A4				label_begin_93:			/* LN: 371 | CYCLE: 0 | RULES: () */ 
579   	 00A4	 90750103		i0 = i7 - (0x103)			# LN: 373 | 
580   	 00A5	 B0140000		i0 = xmem[i0]			# LN: 373 | 
581   	 00A6	 80880000		call (_cl_wavread_recvsample)			# LN: 373 | 
582   	 00A7	 9075020C		i0 = i7 - (0x20c)			# LN: 373 | 
583   	 00A8	 98540000		xmem[i0] = a0h			# LN: 373 | 
584   	 00A9				cline_373_0:			/* LN: 374 | CYCLE: 0 | RULES: () */ 
585   	 00A9	 9075020B		i0 = i7 - (0x20b)			# LN: 374 | 
586   	 00AA	 88140000		a0 = xmem[i0]			# LN: 374 | 
587   	 00AB	 00004EC0		a0 = a0 << 4			# LN: 374 | 
588   	 00AC	 48707FFF		i0 = a0			# LN: 374 | 
589   	 00AD	 9175020A		i1 = i7 - (0x20a)			# LN: 374 | 
590   	 00AE	 80050000		i0 = i0 + (_sampleBuffer + 0)			# LN: 374 | 
591   	 00AF	 88140001		a0 = xmem[i1]			# LN: 374 | 
592   	 00B0	 09707FFF		a1 = i0			# LN: 374 | 
593   	 00B1	 00004480		a0 = a1 + a0			# LN: 374 | 
594   	 00B2	 98090030		AnyReg(i0, a0h)			# LN: 374 | 
595   	 00B3	 9175020C		i1 = i7 - (0x20c)			# LN: 374 | 
596   	 00B4	 88140001		a0 = xmem[i1]			# LN: 374 | 
597   	 00B5	 98540000		xmem[i0] = a0h			# LN: 374 | 
598   	 00B6				cline_374_0:			/* LN: 371 | CYCLE: 0 | RULES: () */ 
599   	 00B6				init_latch_label_9:			/* LN: 375 | CYCLE: 0 | RULES: () */ 
600   	 00B6	 9075020B		i0 = i7 - (0x20b)			# LN: 371 | 
601   	 00B7	 88140000		a0 = xmem[i0]			# LN: 371 | 
602   	 00B8	 894A0001		uhalfword(a1) = (0x1)			# LN: 371 | 
603   	 00B9	 00004408		a0 = a0 + a1			# LN: 371 | 
604   	 00BA	 9075020B		i0 = i7 - (0x20b)			# LN: 371 | 
605   	 00BB				label_end_93:			# LN: 371 | CYCLE: 5 | RULES: ()
606   	 00BB	 98540000		xmem[i0] = a0h			# LN: 371 | 
607   	 00BC				cline_371_1:			/* LN: 369 | CYCLE: 0 | RULES: () */ 
608   	 00BC				init_latch_label_10:			/* LN: 376 | CYCLE: 0 | RULES: () */ 
609   	 00BC				for_end_11:			/* LN: 371 | CYCLE: 0 | RULES: () */ 
610   	 00BC	 9075020A		i0 = i7 - (0x20a)			# LN: 369 | 
611   	 00BD	 88140000		a0 = xmem[i0]			# LN: 369 | 
612   	 00BE	 894A0001		uhalfword(a1) = (0x1)			# LN: 369 | 
613   	 00BF	 00004408		a0 = a0 + a1			# LN: 369 | 
614   	 00C0	 9075020A		i0 = i7 - (0x20a)			# LN: 369 | 
615   	 00C1				label_end_94:			# LN: 369 | CYCLE: 5 | RULES: ()
616   	 00C1	 98540000		xmem[i0] = a0h			# LN: 369 | 
617   	 00C2				cline_369_1:			/* LN: 382 | CYCLE: 0 | RULES: () */ 
618   	 00C2				for_end_10:			/* LN: 369 | CYCLE: 0 | RULES: () */ 
619   	 00C2	 808800FB		call (_processing)			# LN: 382 | 
620   	 00C3				cline_382_0:			/* LN: 385 | CYCLE: 0 | RULES: () */ 
621   	 00C3	 9075020A		i0 = i7 - (0x20a)			# LN: 385 | 
622   	 00C4	 00004DC0		a0 = 0			# LN: 385 | 
623   	 00C5	 98540000		xmem[i0] = a0h			# LN: 385 | 
624   	 00C6	 810000E8		do (0x10), label_end_96			# LN: 385 | 
625   	 00C7				cline_385_0:			/* LN: 387 | CYCLE: 0 | RULES: () */ 
626   	 00C7				label_begin_96:			/* LN: 385 | CYCLE: 0 | RULES: () */ 
627   	 00C7	 9075020B		i0 = i7 - (0x20b)			# LN: 387 | 
628   	 00C8	 00004DC0		a0 = 0			# LN: 387 | 
629   	 00C9	 98540000		xmem[i0] = a0h			# LN: 387 | 
630   	 00CA	 805000E2		do (0x5), label_end_95			# LN: 387 | 
631   	 00CB				cline_387_0:			/* LN: 389 | CYCLE: 0 | RULES: () */ 
632   	 00CB				label_begin_95:			/* LN: 387 | CYCLE: 0 | RULES: () */ 
633   	 00CB	 9075020B		i0 = i7 - (0x20b)			# LN: 389 | 
634   	 00CC	 88140000		a0 = xmem[i0]			# LN: 389 | 
635   	 00CD	 00004EC0		a0 = a0 << 4			# LN: 389 | 
636   	 00CE	 48707FFF		i0 = a0			# LN: 389 | 
637   	 00CF	 9175020A		i1 = i7 - (0x20a)			# LN: 389 | 
638   	 00D0	 80050000		i0 = i0 + (_sampleBuffer + 0)			# LN: 389 | 
639   	 00D1	 88140001		a0 = xmem[i1]			# LN: 389 | 
640   	 00D2	 09707FFF		a1 = i0			# LN: 389 | 
641   	 00D3	 00004480		a0 = a1 + a0			# LN: 389 | 
642   	 00D4	 98090030		AnyReg(i0, a0h)			# LN: 389 | 
643   	 00D5	 9175020C		i1 = i7 - (0x20c)			# LN: 389 | 
644   	 00D6	 88140000		a0 = xmem[i0]			# LN: 389 | 
645   	 00D7	 98540001		xmem[i1] = a0h			# LN: 389 | 
646   	 00D8				cline_389_0:			/* LN: 390 | CYCLE: 0 | RULES: () */ 
647   	 00D8	 90750207		i0 = i7 - (0x207)			# LN: 390 | 
648   	 00D9	 9175020C		i1 = i7 - (0x20c)			# LN: 390 | 
649   	 00DA	 88140001		a0 = xmem[i1]			# LN: 390 | 
650   	 00DB	 B0140000		i0 = xmem[i0]			# LN: 390 | 
651   	 00DC	 80880000		call (_cl_wavwrite_sendsample)			# LN: 390 | 
652   	 00DD				cline_390_0:			/* LN: 387 | CYCLE: 0 | RULES: () */ 
653   	 00DD				init_latch_label_11:			/* LN: 391 | CYCLE: 0 | RULES: () */ 
654   	 00DD	 9075020B		i0 = i7 - (0x20b)			# LN: 387 | 
655   	 00DE	 88140000		a0 = xmem[i0]			# LN: 387 | 
656   	 00DF	 894A0001		uhalfword(a1) = (0x1)			# LN: 387 | 
657   	 00E0	 00004408		a0 = a0 + a1			# LN: 387 | 
658   	 00E1	 9075020B		i0 = i7 - (0x20b)			# LN: 387 | 
659   	 00E2				label_end_95:			# LN: 387 | CYCLE: 5 | RULES: ()
660   	 00E2	 98540000		xmem[i0] = a0h			# LN: 387 | 
661   	 00E3				cline_387_1:			/* LN: 385 | CYCLE: 0 | RULES: () */ 
662   	 00E3				init_latch_label_12:			/* LN: 392 | CYCLE: 0 | RULES: () */ 
663   	 00E3				for_end_13:			/* LN: 387 | CYCLE: 0 | RULES: () */ 
664   	 00E3	 9075020A		i0 = i7 - (0x20a)			# LN: 385 | 
665   	 00E4	 88140000		a0 = xmem[i0]			# LN: 385 | 
666   	 00E5	 894A0001		uhalfword(a1) = (0x1)			# LN: 385 | 
667   	 00E6	 00004408		a0 = a0 + a1			# LN: 385 | 
668   	 00E7	 9075020A		i0 = i7 - (0x20a)			# LN: 385 | 
669   	 00E8				label_end_96:			# LN: 385 | CYCLE: 5 | RULES: ()
670   	 00E8	 98540000		xmem[i0] = a0h			# LN: 385 | 
671   	 00E9				cline_385_1:			/* LN: 367 | CYCLE: 0 | RULES: () */ 
672   	 00E9				init_latch_label_13:			/* LN: 393 | CYCLE: 0 | RULES: () */ 
673   	 00E9				for_end_12:			/* LN: 385 | CYCLE: 0 | RULES: () */ 
674   	 00E9	 90750209		i0 = i7 - (0x209)			# LN: 367 | 
675   	 00EA	 88140000		a0 = xmem[i0]			# LN: 367 | 
676   	 00EB	 894A0001		uhalfword(a1) = (0x1)			# LN: 367 | 
677   	 00EC	 00004408		a0 = a0 + a1			# LN: 367 | 
678   	 00ED	 90750209		i0 = i7 - (0x209)			# LN: 367 | 
679   	 00EE	 98540000		xmem[i0] = a0h			# LN: 367 | 
680   	 00EF	 80080096		jmp (for_9)			# LN: 367 | 
681   	 00F0				cline_367_1:			/* LN: 398 | CYCLE: 0 | RULES: () */ 
682   	 00F0				for_end_9:			/* LN: 367 | CYCLE: 0 | RULES: () */ 
683   	 00F0	 90750103		i0 = i7 - (0x103)			# LN: 398 | 
684   	 00F1	 B0140000		i0 = xmem[i0]			# LN: 398 | 
685   	 00F2	 80880000		call (_cl_wavread_close)			# LN: 398 | 
686   	 00F3				cline_398_0:			/* LN: 399 | CYCLE: 0 | RULES: () */ 
687   	 00F3	 90750207		i0 = i7 - (0x207)			# LN: 399 | 
688   	 00F4	 B0140000		i0 = xmem[i0]			# LN: 399 | 
689   	 00F5	 80880000		call (_cl_wavwrite_close)			# LN: 399 | 
690   	 00F6				cline_399_0:			/* LN: 402 | CYCLE: 0 | RULES: () */ 
691   	 00F6	 00004DC0		a0 = 0			# LN: 402 | 
692   	 00F7	 800800F8		jmp (__epilogue_226)			# LN: 402 | 
693   	 00F8				cline_402_0:			/* LN: 403 | CYCLE: 0 | RULES: () */ 
694   	 00F8				__epilogue_226:			/* LN: 403 | CYCLE: 0 | RULES: () */ 
695   	 00F8	 9775020C		i7 = i7 - (0x20c)			# LN: 403 | 
696   	 00F9	 02177FFF		i7 -= 1			# LN: 403 | 
697   	 00FA	 81880000		ret			# LN: 403 | 
698   						
699   						
700   						
701   	 00FB				_processing:			/* LN: 40 | CYCLE: 0 | RULES: () */ 
702   	 00FB	 BB540007		xmem[i7] = i7			# LN: 40 | 
703   	 00FC	 020F7FFF		i7 += 1			# LN: 40 | 
704   	 00FD				cline_40_0:			/* LN: 42 | CYCLE: 0 | RULES: () */ 
705   	 00FD	 A0050000		i0 = (0) + (_sampleBuffer + 0)			# LN: 42 | 
706   	 00FE	 B0440000		xmem[_leftOutput + 0] = i0			# LN: 42 | 
707   	 00FF				cline_42_0:			/* LN: 43 | CYCLE: 0 | RULES: () */ 
708   	 00FF	 A0050020		i0 = (0) + (_sampleBuffer + 32)			# LN: 43 | 
709   	 0100	 B0440000		xmem[_rightOutput + 0] = i0			# LN: 43 | 
710   	 0101				cline_43_0:			/* LN: 44 | CYCLE: 0 | RULES: () */ 
711   	 0101	 A0050010		i0 = (0) + (_sampleBuffer + 16)			# LN: 44 | 
712   	 0102	 B0440000		xmem[_centralOutput + 0] = i0			# LN: 44 | 
713   	 0103				cline_44_0:			/* LN: 45 | CYCLE: 0 | RULES: () */ 
714   	 0103	 A0050030		i0 = (0) + (_sampleBuffer + 48)			# LN: 45 | 
715   	 0104	 B0440000		xmem[_lsOutput + 0] = i0			# LN: 45 | 
716   	 0105				cline_45_0:			/* LN: 46 | CYCLE: 0 | RULES: () */ 
717   	 0105	 A0050040		i0 = (0) + (_sampleBuffer + 64)			# LN: 46 | 
718   	 0106	 B0440000		xmem[_rsOutput + 0] = i0			# LN: 46 | 
719   	 0107				cline_46_0:			/* LN: 48 | CYCLE: 0 | RULES: () */ 
720   	 0107				switch_0:			/* LN: 48 | CYCLE: 0 | RULES: () */ 
721   	 0107	 88040000		a0 = xmem[_outputMode + 0]			# LN: 48 | 
722   	 0108	 00004E80		a0 & a0			# LN: 48 | 
723   	 0109	 84080222		if (a == 0) jmp (case_3)			# LN: 48 | 
724   	 010A	 88040000		a0 = xmem[_outputMode + 0]			# LN: 48 | 
725   	 010B	 894A0001		uhalfword(a1) = (0x1)			# LN: 48 | 
726   	 010C	 00004F08		a0 - a1			# LN: 48 | 
727   	 010D	 84080414		if (a == 0) jmp (case_9)			# LN: 48 | 
728   	 010E	 88040000		a0 = xmem[_outputMode + 0]			# LN: 48 | 
729   	 010F	 894A0002		uhalfword(a1) = (0x2)			# LN: 48 | 
730   	 0110	 00004F08		a0 - a1			# LN: 48 | 
731   	 0111	 8408030F		if (a == 0) jmp (case_6)			# LN: 48 | 
732   	 0112	 88040000		a0 = xmem[_outputMode + 0]			# LN: 48 | 
733   	 0113	 894A0003		uhalfword(a1) = (0x3)			# LN: 48 | 
734   	 0114	 00004F08		a0 - a1			# LN: 48 | 
735   	 0115	 84080117		if (a == 0) jmp (case_0)			# LN: 48 | 
736   	 0116	 80080507		jmp (switch_end_0)			# LN: 48 | 
737   	 0117				cline_48_0:			/* LN: 51 | CYCLE: 0 | RULES: () */ 
738   	 0117				switch_1:			/* LN: 51 | CYCLE: 0 | RULES: () */ 
739   	 0117				case_0:			/* LN: 50 | CYCLE: 0 | RULES: () */ 
740   	 0117	 88040000		a0 = xmem[_mode_switch + 0]			# LN: 51 | 
741   	 0118	 00004E80		a0 & a0			# LN: 51 | 
742   	 0119	 840801A0		if (a == 0) jmp (case_2)			# LN: 51 | 
743   	 011A	 88040000		a0 = xmem[_mode_switch + 0]			# LN: 51 | 
744   	 011B	 894A0001		uhalfword(a1) = (0x1)			# LN: 51 | 
745   	 011C	 00004F08		a0 - a1			# LN: 51 | 
746   	 011D	 8408011F		if (a == 0) jmp (case_1)			# LN: 51 | 
747   	 011E	 80080221		jmp (switch_end_1)			# LN: 51 | 
748   	 011F				cline_51_0:			/* LN: 54 | CYCLE: 0 | RULES: () */ 
749   	 011F				case_1:			/* LN: 53 | CYCLE: 0 | RULES: () */ 
750   	 011F	 00004DC0		a0 = 0			# LN: 54 | 
751   	 0120	 98440000		xmem[_j + 0] = a0h			# LN: 54 | 
752   	 0121				for_1:			/* LN: 54 | CYCLE: 0 | RULES: () */ 
753   	 0121	 88040000		a0 = xmem[_j + 0]			# LN: 54 | 
754   	 0122	 894A0010		uhalfword(a1) = (0x10)			# LN: 54 | 
755   	 0123	 00004F08		a0 - a1			# LN: 54 | 
756   	 0124	 84C80199		if (a >= 0) jmp (for_end_1)			# LN: 54 | 
757   	 0125				cline_54_0:			/* LN: 56 | CYCLE: 0 | RULES: () */ 
758   	 0125	 B0040000		i0 = xmem[_leftOutput + 0]			# LN: 56 | 
759   	 0126	 80040000		x0 = xmem[_input_gain + 0]			# LN: 56 | 
760   	 0127	 81940000		x1 = ymem[i0]			# LN: 56 | 
761   	 0128	 A0050000		i0 = (0) + (_leftOutput)			# LN: 56 | 
762   	 0129	 B0140000		i0 = xmem[i0]			# LN: 56 | 
763   	 012A	 00002020		a0 = x1 * x0			# LN: 56 | 
764   	 012B	 88D40000		ymem[i0] = a0			# LN: 56 | 
765   	 012C				cline_56_0:			/* LN: 57 | CYCLE: 0 | RULES: () */ 
766   	 012C	 B0040000		i0 = xmem[_leftOutput + 0]			# LN: 57 | 
767   	 012D	 A1050000		i1 = (0) + (_leftOutput)			# LN: 57 | 
768   	 012E	 88940000		a0 = ymem[i0]			# LN: 57 | 
769   	 012F	 B0140001		i0 = xmem[i1]			# LN: 57 | 
770   	 0130	 00004E00		a0 = a0 << 1			# LN: 57 | 
771   	 0131	 98D40000		ymem[i0] = a0h			# LN: 57 | 
772   	 0132				cline_57_0:			/* LN: 58 | CYCLE: 0 | RULES: () */ 
773   	 0132	 B0040000		i0 = xmem[_centralOutput + 0]			# LN: 58 | 
774   	 0133	 80040000		x0 = xmem[_input_gain + 0]			# LN: 58 | 
775   	 0134	 81940000		x1 = ymem[i0]			# LN: 58 | 
776   	 0135	 A0050000		i0 = (0) + (_centralOutput)			# LN: 58 | 
777   	 0136	 B0140000		i0 = xmem[i0]			# LN: 58 | 
778   	 0137	 00002020		a0 = x1 * x0			# LN: 58 | 
779   	 0138	 88D40000		ymem[i0] = a0			# LN: 58 | 
780   	 0139				cline_58_0:			/* LN: 59 | CYCLE: 0 | RULES: () */ 
781   	 0139	 B0040000		i0 = xmem[_centralOutput + 0]			# LN: 59 | 
782   	 013A	 80040000		x0 = xmem[_INPUT_MODE1_C + 0]			# LN: 59 | 
783   	 013B	 81940000		x1 = ymem[i0]			# LN: 59 | 
784   	 013C	 A0050000		i0 = (0) + (_centralOutput)			# LN: 59 | 
785   	 013D	 B0140000		i0 = xmem[i0]			# LN: 59 | 
786   	 013E	 00002020		a0 = x1 * x0			# LN: 59 | 
787   	 013F	 88D40000		ymem[i0] = a0			# LN: 59 | 
788   	 0140				cline_59_0:			/* LN: 60 | CYCLE: 0 | RULES: () */ 
789   	 0140	 B0040000		i0 = xmem[_centralOutput + 0]			# LN: 60 | 
790   	 0141	 A1050000		i1 = (0) + (_centralOutput)			# LN: 60 | 
791   	 0142	 88940000		a0 = ymem[i0]			# LN: 60 | 
792   	 0143	 B0140001		i0 = xmem[i1]			# LN: 60 | 
793   	 0144	 00004E00		a0 = a0 << 1			# LN: 60 | 
794   	 0145	 98D40000		ymem[i0] = a0h			# LN: 60 | 
795   	 0146				cline_60_0:			/* LN: 61 | CYCLE: 0 | RULES: () */ 
796   	 0146	 B0040000		i0 = xmem[_centralOutput + 0]			# LN: 61 | 
797   	 0147	 A1050000		i1 = (0) + (_centralOutput)			# LN: 61 | 
798   	 0148	 88940000		a0 = ymem[i0]			# LN: 61 | 
799   	 0149	 B0140001		i0 = xmem[i1]			# LN: 61 | 
800   	 014A	 00004E00		a0 = a0 << 1			# LN: 61 | 
801   	 014B	 98D40000		ymem[i0] = a0h			# LN: 61 | 
802   	 014C				cline_61_0:			/* LN: 62 | CYCLE: 0 | RULES: () */ 
803   	 014C	 B0040000		i0 = xmem[_lsOutput + 0]			# LN: 62 | 
804   	 014D	 80040000		x0 = xmem[_input_gain + 0]			# LN: 62 | 
805   	 014E	 81940000		x1 = ymem[i0]			# LN: 62 | 
806   	 014F	 A0050000		i0 = (0) + (_lsOutput)			# LN: 62 | 
807   	 0150	 B0140000		i0 = xmem[i0]			# LN: 62 | 
808   	 0151	 00002020		a0 = x1 * x0			# LN: 62 | 
809   	 0152	 88D40000		ymem[i0] = a0			# LN: 62 | 
810   	 0153				cline_62_0:			/* LN: 63 | CYCLE: 0 | RULES: () */ 
811   	 0153	 B0040000		i0 = xmem[_lsOutput + 0]			# LN: 63 | 
812   	 0154	 80040000		x0 = xmem[_INPUT_MODE1_LS + 0]			# LN: 63 | 
813   	 0155	 81940000		x1 = ymem[i0]			# LN: 63 | 
814   	 0156	 A0050000		i0 = (0) + (_lsOutput)			# LN: 63 | 
815   	 0157	 B0140000		i0 = xmem[i0]			# LN: 63 | 
816   	 0158	 00002020		a0 = x1 * x0			# LN: 63 | 
817   	 0159	 88D40000		ymem[i0] = a0			# LN: 63 | 
818   	 015A				cline_63_0:			/* LN: 64 | CYCLE: 0 | RULES: () */ 
819   	 015A	 B0040000		i0 = xmem[_lsOutput + 0]			# LN: 64 | 
820   	 015B	 A1050000		i1 = (0) + (_lsOutput)			# LN: 64 | 
821   	 015C	 88940000		a0 = ymem[i0]			# LN: 64 | 
822   	 015D	 B0140001		i0 = xmem[i1]			# LN: 64 | 
823   	 015E	 00004E00		a0 = a0 << 1			# LN: 64 | 
824   	 015F	 98D40000		ymem[i0] = a0h			# LN: 64 | 
825   	 0160				cline_64_0:			/* LN: 66 | CYCLE: 0 | RULES: () */ 
826   	 0160	 B0040000		i0 = xmem[_rightOutput + 0]			# LN: 66 | 
827   	 0161	 80040000		x0 = xmem[_input_gain + 0]			# LN: 66 | 
828   	 0162	 81940000		x1 = ymem[i0]			# LN: 66 | 
829   	 0163	 A0050000		i0 = (0) + (_rightOutput)			# LN: 66 | 
830   	 0164	 B0140000		i0 = xmem[i0]			# LN: 66 | 
831   	 0165	 00002020		a0 = x1 * x0			# LN: 66 | 
832   	 0166	 88D40000		ymem[i0] = a0			# LN: 66 | 
833   	 0167				cline_66_0:			/* LN: 67 | CYCLE: 0 | RULES: () */ 
834   	 0167	 B0040000		i0 = xmem[_rightOutput + 0]			# LN: 67 | 
835   	 0168	 A1050000		i1 = (0) + (_rightOutput)			# LN: 67 | 
836   	 0169	 88940000		a0 = ymem[i0]			# LN: 67 | 
837   	 016A	 B0140001		i0 = xmem[i1]			# LN: 67 | 
838   	 016B	 00004E00		a0 = a0 << 1			# LN: 67 | 
839   	 016C	 98D40000		ymem[i0] = a0h			# LN: 67 | 
840   	 016D				cline_67_0:			/* LN: 68 | CYCLE: 0 | RULES: () */ 
841   	 016D	 B0040000		i0 = xmem[_rsOutput + 0]			# LN: 68 | 
842   	 016E	 80040000		x0 = xmem[_input_gain + 0]			# LN: 68 | 
843   	 016F	 886AFFFF		halfword(a0) = (0xffff)			# LN: 68 | 
844   	 0170	 81940000		x1 = ymem[i0]			# LN: 68 | 
845   	 0171	 00002024		b0 = x1 * x0			# LN: 68 | 
846   	 0172	 80880000		call (__int_to_laccum)			# LN: 68 | 
847   	 0173	 00005C21		a1 =+ b0; b1 =+ a0			# LN: 68, 68 | 
848   	 0174	 00004C28		a0 =+ b1			# LN: 68 | 
849   	 0175	 80880000		call (__mul_sat_laccum)			# LN: 68 | 
850   	 0176	 A0050000		i0 = (0) + (_rsOutput)			# LN: 68 | 
851   	 0177	 B0140000		i0 = xmem[i0]			# LN: 68 | 
852   	 0178	 00007FFF		nop #empty cycle
853   	 0179	 88D40000		ymem[i0] = a0			# LN: 68 | 
854   	 017A				cline_68_0:			/* LN: 69 | CYCLE: 0 | RULES: () */ 
855   	 017A	 B0040000		i0 = xmem[_rsOutput + 0]			# LN: 69 | 
856   	 017B	 A1050000		i1 = (0) + (_rsOutput)			# LN: 69 | 
857   	 017C	 88940000		a0 = ymem[i0]			# LN: 69 | 
858   	 017D	 B0140001		i0 = xmem[i1]			# LN: 69 | 
859   	 017E	 00004E00		a0 = a0 << 1			# LN: 69 | 
860   	 017F	 98D40000		ymem[i0] = a0h			# LN: 69 | 
861   	 0180				cline_69_0:			/* LN: 71 | CYCLE: 0 | RULES: () */ 
862   	 0180	 B0040000		i0 = xmem[_leftOutput + 0]			# LN: 71 | 
863   	 0181	 00007FFF		nop #empty cycle
864   	 0182	 02087FFF		i0 += 1			# LN: 71 | 
865   	 0183	 B0440000		xmem[_leftOutput + 0] = i0			# LN: 71 | 
866   	 0184				cline_71_0:			/* LN: 72 | CYCLE: 0 | RULES: () */ 
867   	 0184	 B0040000		i0 = xmem[_rightOutput + 0]			# LN: 72 | 
868   	 0185	 00007FFF		nop #empty cycle
869   	 0186	 02087FFF		i0 += 1			# LN: 72 | 
870   	 0187	 B0440000		xmem[_rightOutput + 0] = i0			# LN: 72 | 
871   	 0188				cline_72_0:			/* LN: 73 | CYCLE: 0 | RULES: () */ 
872   	 0188	 B0040000		i0 = xmem[_rsOutput + 0]			# LN: 73 | 
873   	 0189	 00007FFF		nop #empty cycle
874   	 018A	 02087FFF		i0 += 1			# LN: 73 | 
875   	 018B	 B0440000		xmem[_rsOutput + 0] = i0			# LN: 73 | 
876   	 018C				cline_73_0:			/* LN: 74 | CYCLE: 0 | RULES: () */ 
877   	 018C	 B0040000		i0 = xmem[_centralOutput + 0]			# LN: 74 | 
878   	 018D	 00007FFF		nop #empty cycle
879   	 018E	 02087FFF		i0 += 1			# LN: 74 | 
880   	 018F	 B0440000		xmem[_centralOutput + 0] = i0			# LN: 74 | 
881   	 0190				cline_74_0:			/* LN: 75 | CYCLE: 0 | RULES: () */ 
882   	 0190	 B0040000		i0 = xmem[_lsOutput + 0]			# LN: 75 | 
883   	 0191	 00007FFF		nop #empty cycle
884   	 0192	 02087FFF		i0 += 1			# LN: 75 | 
885   	 0193	 B0440000		xmem[_lsOutput + 0] = i0			# LN: 75 | 
886   	 0194				cline_75_0:			/* LN: 54 | CYCLE: 0 | RULES: () */ 
887   	 0194				init_latch_label_1:			/* LN: 76 | CYCLE: 0 | RULES: () */ 
888   	 0194	 88040000		a0 = xmem[_j + 0]			# LN: 54 | 
889   	 0195	 894A0001		uhalfword(a1) = (0x1)			# LN: 54 | 
890   	 0196	 00004408		a0 = a0 + a1			# LN: 54 | 
891   	 0197	 98440000		xmem[_j + 0] = a0h			# LN: 54 | 
892   	 0198	 80080121		jmp (for_1)			# LN: 54 | 
893   	 0199				cline_54_1:			/* LN: 78 | CYCLE: 0 | RULES: () */ 
894   	 0199				for_end_1:			/* LN: 54 | CYCLE: 0 | RULES: () */ 
895   	 0199	 A0050020		i0 = (0) + (_sampleBuffer + 32)			# LN: 78 | 
896   	 019A	 A1050020		i1 = (0) + (_sampleBuffer + 32)			# LN: 78 | 
897   	 019B	 80880009		call (_gst_audio_invert_transform)			# LN: 78 | 
898   	 019C				cline_78_0:			/* LN: 79 | CYCLE: 0 | RULES: () */ 
899   	 019C	 A0050000		i0 = (0) + (_sampleBuffer + 0)			# LN: 79 | 
900   	 019D	 A1050000		i1 = (0) + (_sampleBuffer + 0)			# LN: 79 | 
901   	 019E	 80880009		call (_gst_audio_invert_transform)			# LN: 79 | 
902   	 019F				cline_79_0:			/* LN: 82 | CYCLE: 0 | RULES: () */ 
903   	 019F	 80080221		jmp (switch_end_1)			# LN: 82 | 
904   	 01A0				cline_82_0:			/* LN: 86 | CYCLE: 0 | RULES: () */ 
905   	 01A0				case_2:			/* LN: 85 | CYCLE: 0 | RULES: () */ 
906   	 01A0	 00004DC0		a0 = 0			# LN: 86 | 
907   	 01A1	 98440000		xmem[_j + 0] = a0h			# LN: 86 | 
908   	 01A2				for_2:			/* LN: 86 | CYCLE: 0 | RULES: () */ 
909   	 01A2	 88040000		a0 = xmem[_j + 0]			# LN: 86 | 
910   	 01A3	 894A0010		uhalfword(a1) = (0x10)			# LN: 86 | 
911   	 01A4	 00004F08		a0 - a1			# LN: 86 | 
912   	 01A5	 84C8021A		if (a >= 0) jmp (for_end_2)			# LN: 86 | 
913   	 01A6				cline_86_0:			/* LN: 88 | CYCLE: 0 | RULES: () */ 
914   	 01A6	 B0040000		i0 = xmem[_leftOutput + 0]			# LN: 88 | 
915   	 01A7	 80040000		x0 = xmem[_input_gain + 0]			# LN: 88 | 
916   	 01A8	 81940000		x1 = ymem[i0]			# LN: 88 | 
917   	 01A9	 A0050000		i0 = (0) + (_leftOutput)			# LN: 88 | 
918   	 01AA	 B0140000		i0 = xmem[i0]			# LN: 88 | 
919   	 01AB	 00002020		a0 = x1 * x0			# LN: 88 | 
920   	 01AC	 88D40000		ymem[i0] = a0			# LN: 88 | 
921   	 01AD				cline_88_0:			/* LN: 89 | CYCLE: 0 | RULES: () */ 
922   	 01AD	 B0040000		i0 = xmem[_leftOutput + 0]			# LN: 89 | 
923   	 01AE	 A1050000		i1 = (0) + (_leftOutput)			# LN: 89 | 
924   	 01AF	 88940000		a0 = ymem[i0]			# LN: 89 | 
925   	 01B0	 B0140001		i0 = xmem[i1]			# LN: 89 | 
926   	 01B1	 00004E00		a0 = a0 << 1			# LN: 89 | 
927   	 01B2	 98D40000		ymem[i0] = a0h			# LN: 89 | 
928   	 01B3				cline_89_0:			/* LN: 90 | CYCLE: 0 | RULES: () */ 
929   	 01B3	 B0040000		i0 = xmem[_centralOutput + 0]			# LN: 90 | 
930   	 01B4	 80040000		x0 = xmem[_input_gain + 0]			# LN: 90 | 
931   	 01B5	 81940000		x1 = ymem[i0]			# LN: 90 | 
932   	 01B6	 A0050000		i0 = (0) + (_centralOutput)			# LN: 90 | 
933   	 01B7	 B0140000		i0 = xmem[i0]			# LN: 90 | 
934   	 01B8	 00002020		a0 = x1 * x0			# LN: 90 | 
935   	 01B9	 88D40000		ymem[i0] = a0			# LN: 90 | 
936   	 01BA				cline_90_0:			/* LN: 91 | CYCLE: 0 | RULES: () */ 
937   	 01BA	 B0040000		i0 = xmem[_centralOutput + 0]			# LN: 91 | 
938   	 01BB	 80040000		x0 = xmem[_INPUT_MODE0_C + 0]			# LN: 91 | 
939   	 01BC	 81940000		x1 = ymem[i0]			# LN: 91 | 
940   	 01BD	 A0050000		i0 = (0) + (_centralOutput)			# LN: 91 | 
941   	 01BE	 B0140000		i0 = xmem[i0]			# LN: 91 | 
942   	 01BF	 00002020		a0 = x1 * x0			# LN: 91 | 
943   	 01C0	 88D40000		ymem[i0] = a0			# LN: 91 | 
944   	 01C1				cline_91_0:			/* LN: 92 | CYCLE: 0 | RULES: () */ 
945   	 01C1	 B0040000		i0 = xmem[_centralOutput + 0]			# LN: 92 | 
946   	 01C2	 A1050000		i1 = (0) + (_centralOutput)			# LN: 92 | 
947   	 01C3	 88940000		a0 = ymem[i0]			# LN: 92 | 
948   	 01C4	 B0140001		i0 = xmem[i1]			# LN: 92 | 
949   	 01C5	 00004E00		a0 = a0 << 1			# LN: 92 | 
950   	 01C6	 98D40000		ymem[i0] = a0h			# LN: 92 | 
951   	 01C7				cline_92_0:			/* LN: 93 | CYCLE: 0 | RULES: () */ 
952   	 01C7	 B0040000		i0 = xmem[_centralOutput + 0]			# LN: 93 | 
953   	 01C8	 A1050000		i1 = (0) + (_centralOutput)			# LN: 93 | 
954   	 01C9	 88940000		a0 = ymem[i0]			# LN: 93 | 
955   	 01CA	 B0140001		i0 = xmem[i1]			# LN: 93 | 
956   	 01CB	 00004E00		a0 = a0 << 1			# LN: 93 | 
957   	 01CC	 98D40000		ymem[i0] = a0h			# LN: 93 | 
958   	 01CD				cline_93_0:			/* LN: 94 | CYCLE: 0 | RULES: () */ 
959   	 01CD	 B0040000		i0 = xmem[_lsOutput + 0]			# LN: 94 | 
960   	 01CE	 80040000		x0 = xmem[_input_gain + 0]			# LN: 94 | 
961   	 01CF	 81940000		x1 = ymem[i0]			# LN: 94 | 
962   	 01D0	 A0050000		i0 = (0) + (_lsOutput)			# LN: 94 | 
963   	 01D1	 B0140000		i0 = xmem[i0]			# LN: 94 | 
964   	 01D2	 00002020		a0 = x1 * x0			# LN: 94 | 
965   	 01D3	 88D40000		ymem[i0] = a0			# LN: 94 | 
966   	 01D4				cline_94_0:			/* LN: 95 | CYCLE: 0 | RULES: () */ 
967   	 01D4	 B0040000		i0 = xmem[_lsOutput + 0]			# LN: 95 | 
968   	 01D5	 80040000		x0 = xmem[_INPUT_MODE0_LS + 0]			# LN: 95 | 
969   	 01D6	 81940000		x1 = ymem[i0]			# LN: 95 | 
970   	 01D7	 A0050000		i0 = (0) + (_lsOutput)			# LN: 95 | 
971   	 01D8	 B0140000		i0 = xmem[i0]			# LN: 95 | 
972   	 01D9	 00002020		a0 = x1 * x0			# LN: 95 | 
973   	 01DA	 88D40000		ymem[i0] = a0			# LN: 95 | 
974   	 01DB				cline_95_0:			/* LN: 96 | CYCLE: 0 | RULES: () */ 
975   	 01DB	 B0040000		i0 = xmem[_lsOutput + 0]			# LN: 96 | 
976   	 01DC	 A1050000		i1 = (0) + (_lsOutput)			# LN: 96 | 
977   	 01DD	 88940000		a0 = ymem[i0]			# LN: 96 | 
978   	 01DE	 B0140001		i0 = xmem[i1]			# LN: 96 | 
979   	 01DF	 00004E00		a0 = a0 << 1			# LN: 96 | 
980   	 01E0	 98D40000		ymem[i0] = a0h			# LN: 96 | 
981   	 01E1				cline_96_0:			/* LN: 98 | CYCLE: 0 | RULES: () */ 
982   	 01E1	 B0040000		i0 = xmem[_rightOutput + 0]			# LN: 98 | 
983   	 01E2	 80040000		x0 = xmem[_input_gain + 0]			# LN: 98 | 
984   	 01E3	 81940000		x1 = ymem[i0]			# LN: 98 | 
985   	 01E4	 A0050000		i0 = (0) + (_rightOutput)			# LN: 98 | 
986   	 01E5	 B0140000		i0 = xmem[i0]			# LN: 98 | 
987   	 01E6	 00002020		a0 = x1 * x0			# LN: 98 | 
988   	 01E7	 88D40000		ymem[i0] = a0			# LN: 98 | 
989   	 01E8				cline_98_0:			/* LN: 99 | CYCLE: 0 | RULES: () */ 
990   	 01E8	 B0040000		i0 = xmem[_rightOutput + 0]			# LN: 99 | 
991   	 01E9	 A1050000		i1 = (0) + (_rightOutput)			# LN: 99 | 
992   	 01EA	 88940000		a0 = ymem[i0]			# LN: 99 | 
993   	 01EB	 B0140001		i0 = xmem[i1]			# LN: 99 | 
994   	 01EC	 00004E00		a0 = a0 << 1			# LN: 99 | 
995   	 01ED	 98D40000		ymem[i0] = a0h			# LN: 99 | 
996   	 01EE				cline_99_0:			/* LN: 100 | CYCLE: 0 | RULES: () */ 
997   	 01EE	 B0040000		i0 = xmem[_rsOutput + 0]			# LN: 100 | 
998   	 01EF	 80040000		x0 = xmem[_input_gain + 0]			# LN: 100 | 
999   	 01F0	 886AFFFF		halfword(a0) = (0xffff)			# LN: 100 | 
1000  	 01F1	 81940000		x1 = ymem[i0]			# LN: 100 | 
1001  	 01F2	 00002024		b0 = x1 * x0			# LN: 100 | 
1002  	 01F3	 80880000		call (__int_to_laccum)			# LN: 100 | 
1003  	 01F4	 00005C21		a1 =+ b0; b1 =+ a0			# LN: 100, 100 | 
1004  	 01F5	 00004C28		a0 =+ b1			# LN: 100 | 
1005  	 01F6	 80880000		call (__mul_sat_laccum)			# LN: 100 | 
1006  	 01F7	 A0050000		i0 = (0) + (_rsOutput)			# LN: 100 | 
1007  	 01F8	 B0140000		i0 = xmem[i0]			# LN: 100 | 
1008  	 01F9	 00007FFF		nop #empty cycle
1009  	 01FA	 88D40000		ymem[i0] = a0			# LN: 100 | 
1010  	 01FB				cline_100_0:			/* LN: 101 | CYCLE: 0 | RULES: () */ 
1011  	 01FB	 B0040000		i0 = xmem[_rsOutput + 0]			# LN: 101 | 
1012  	 01FC	 A1050000		i1 = (0) + (_rsOutput)			# LN: 101 | 
1013  	 01FD	 88940000		a0 = ymem[i0]			# LN: 101 | 
1014  	 01FE	 B0140001		i0 = xmem[i1]			# LN: 101 | 
1015  	 01FF	 00004E00		a0 = a0 << 1			# LN: 101 | 
1016  	 0200	 98D40000		ymem[i0] = a0h			# LN: 101 | 
1017  	 0201				cline_101_0:			/* LN: 103 | CYCLE: 0 | RULES: () */ 
1018  	 0201	 B0040000		i0 = xmem[_leftOutput + 0]			# LN: 103 | 
1019  	 0202	 00007FFF		nop #empty cycle
1020  	 0203	 02087FFF		i0 += 1			# LN: 103 | 
1021  	 0204	 B0440000		xmem[_leftOutput + 0] = i0			# LN: 103 | 
1022  	 0205				cline_103_0:			/* LN: 104 | CYCLE: 0 | RULES: () */ 
1023  	 0205	 B0040000		i0 = xmem[_rightOutput + 0]			# LN: 104 | 
1024  	 0206	 00007FFF		nop #empty cycle
1025  	 0207	 02087FFF		i0 += 1			# LN: 104 | 
1026  	 0208	 B0440000		xmem[_rightOutput + 0] = i0			# LN: 104 | 
1027  	 0209				cline_104_0:			/* LN: 105 | CYCLE: 0 | RULES: () */ 
1028  	 0209	 B0040000		i0 = xmem[_rsOutput + 0]			# LN: 105 | 
1029  	 020A	 00007FFF		nop #empty cycle
1030  	 020B	 02087FFF		i0 += 1			# LN: 105 | 
1031  	 020C	 B0440000		xmem[_rsOutput + 0] = i0			# LN: 105 | 
1032  	 020D				cline_105_0:			/* LN: 106 | CYCLE: 0 | RULES: () */ 
1033  	 020D	 B0040000		i0 = xmem[_centralOutput + 0]			# LN: 106 | 
1034  	 020E	 00007FFF		nop #empty cycle
1035  	 020F	 02087FFF		i0 += 1			# LN: 106 | 
1036  	 0210	 B0440000		xmem[_centralOutput + 0] = i0			# LN: 106 | 
1037  	 0211				cline_106_0:			/* LN: 107 | CYCLE: 0 | RULES: () */ 
1038  	 0211	 B0040000		i0 = xmem[_lsOutput + 0]			# LN: 107 | 
1039  	 0212	 00007FFF		nop #empty cycle
1040  	 0213	 02087FFF		i0 += 1			# LN: 107 | 
1041  	 0214	 B0440000		xmem[_lsOutput + 0] = i0			# LN: 107 | 
1042  	 0215				cline_107_0:			/* LN: 86 | CYCLE: 0 | RULES: () */ 
1043  	 0215				init_latch_label_2:			/* LN: 108 | CYCLE: 0 | RULES: () */ 
1044  	 0215	 88040000		a0 = xmem[_j + 0]			# LN: 86 | 
1045  	 0216	 894A0001		uhalfword(a1) = (0x1)			# LN: 86 | 
1046  	 0217	 00004408		a0 = a0 + a1			# LN: 86 | 
1047  	 0218	 98440000		xmem[_j + 0] = a0h			# LN: 86 | 
1048  	 0219	 800801A2		jmp (for_2)			# LN: 86 | 
1049  	 021A				cline_86_1:			/* LN: 110 | CYCLE: 0 | RULES: () */ 
1050  	 021A				for_end_2:			/* LN: 86 | CYCLE: 0 | RULES: () */ 
1051  	 021A	 A0050020		i0 = (0) + (_sampleBuffer + 32)			# LN: 110 | 
1052  	 021B	 A1050020		i1 = (0) + (_sampleBuffer + 32)			# LN: 110 | 
1053  	 021C	 80880009		call (_gst_audio_invert_transform)			# LN: 110 | 
1054  	 021D				cline_110_0:			/* LN: 111 | CYCLE: 0 | RULES: () */ 
1055  	 021D	 A0050000		i0 = (0) + (_sampleBuffer + 0)			# LN: 111 | 
1056  	 021E	 A1050000		i1 = (0) + (_sampleBuffer + 0)			# LN: 111 | 
1057  	 021F	 80880009		call (_gst_audio_invert_transform)			# LN: 111 | 
1058  	 0220				cline_111_0:			/* LN: 112 | CYCLE: 0 | RULES: () */ 
1059  	 0220	 80080221		jmp (switch_end_1)			# LN: 112 | 
1060  	 0221				cline_112_0:			/* LN: 115 | CYCLE: 0 | RULES: () */ 
1061  	 0221				switch_end_1:			/* LN: 51 | CYCLE: 0 | RULES: () */ 
1062  	 0221	 80080507		jmp (switch_end_0)			# LN: 115 | 
1063  	 0222				cline_115_0:			/* LN: 118 | CYCLE: 0 | RULES: () */ 
1064  	 0222				switch_2:			/* LN: 118 | CYCLE: 0 | RULES: () */ 
1065  	 0222				case_3:			/* LN: 117 | CYCLE: 0 | RULES: () */ 
1066  	 0222	 88040000		a0 = xmem[_mode_switch + 0]			# LN: 118 | 
1067  	 0223	 00004E80		a0 & a0			# LN: 118 | 
1068  	 0224	 8408029C		if (a == 0) jmp (case_5)			# LN: 118 | 
1069  	 0225	 88040000		a0 = xmem[_mode_switch + 0]			# LN: 118 | 
1070  	 0226	 894A0001		uhalfword(a1) = (0x1)			# LN: 118 | 
1071  	 0227	 00004F08		a0 - a1			# LN: 118 | 
1072  	 0228	 8408022A		if (a == 0) jmp (case_4)			# LN: 118 | 
1073  	 0229	 8008030E		jmp (switch_end_2)			# LN: 118 | 
1074  	 022A				cline_118_0:			/* LN: 121 | CYCLE: 0 | RULES: () */ 
1075  	 022A				case_4:			/* LN: 120 | CYCLE: 0 | RULES: () */ 
1076  	 022A	 00004DC0		a0 = 0			# LN: 121 | 
1077  	 022B	 98440000		xmem[_j + 0] = a0h			# LN: 121 | 
1078  	 022C				for_3:			/* LN: 121 | CYCLE: 0 | RULES: () */ 
1079  	 022C	 88040000		a0 = xmem[_j + 0]			# LN: 121 | 
1080  	 022D	 894A0010		uhalfword(a1) = (0x10)			# LN: 121 | 
1081  	 022E	 00004F08		a0 - a1			# LN: 121 | 
1082  	 022F	 84C80295		if (a >= 0) jmp (for_end_3)			# LN: 121 | 
1083  	 0230				cline_121_0:			/* LN: 123 | CYCLE: 0 | RULES: () */ 
1084  	 0230	 B0040000		i0 = xmem[_leftOutput + 0]			# LN: 123 | 
1085  	 0231	 80040000		x0 = xmem[_input_gain + 0]			# LN: 123 | 
1086  	 0232	 81940000		x1 = ymem[i0]			# LN: 123 | 
1087  	 0233	 A0050000		i0 = (0) + (_leftOutput)			# LN: 123 | 
1088  	 0234	 B0140000		i0 = xmem[i0]			# LN: 123 | 
1089  	 0235	 00002020		a0 = x1 * x0			# LN: 123 | 
1090  	 0236	 88D40000		ymem[i0] = a0			# LN: 123 | 
1091  	 0237				cline_123_0:			/* LN: 124 | CYCLE: 0 | RULES: () */ 
1092  	 0237	 B0040000		i0 = xmem[_leftOutput + 0]			# LN: 124 | 
1093  	 0238	 A1050000		i1 = (0) + (_leftOutput)			# LN: 124 | 
1094  	 0239	 88940000		a0 = ymem[i0]			# LN: 124 | 
1095  	 023A	 B0140001		i0 = xmem[i1]			# LN: 124 | 
1096  	 023B	 00004E00		a0 = a0 << 1			# LN: 124 | 
1097  	 023C	 98D40000		ymem[i0] = a0h			# LN: 124 | 
1098  	 023D				cline_124_0:			/* LN: 125 | CYCLE: 0 | RULES: () */ 
1099  	 023D	 B0040000		i0 = xmem[_centralOutput + 0]			# LN: 125 | 
1100  	 023E	 80040000		x0 = xmem[_input_gain + 0]			# LN: 125 | 
1101  	 023F	 81940000		x1 = ymem[i0]			# LN: 125 | 
1102  	 0240	 A0050000		i0 = (0) + (_centralOutput)			# LN: 125 | 
1103  	 0241	 B0140000		i0 = xmem[i0]			# LN: 125 | 
1104  	 0242	 00002020		a0 = x1 * x0			# LN: 125 | 
1105  	 0243	 88D40000		ymem[i0] = a0			# LN: 125 | 
1106  	 0244				cline_125_0:			/* LN: 126 | CYCLE: 0 | RULES: () */ 
1107  	 0244	 A0050000		i0 = (0) + (_centralOutput)			# LN: 126 | 
1108  	 0245	 B0140000		i0 = xmem[i0]			# LN: 126 | 
1109  	 0246	 00004DC0		a0 = 0			# LN: 126 | 
1110  	 0247	 88D40000		ymem[i0] = a0			# LN: 126 | 
1111  	 0248				cline_126_0:			/* LN: 127 | CYCLE: 0 | RULES: () */ 
1112  	 0248	 B0040000		i0 = xmem[_centralOutput + 0]			# LN: 127 | 
1113  	 0249	 A1050000		i1 = (0) + (_centralOutput)			# LN: 127 | 
1114  	 024A	 88940000		a0 = ymem[i0]			# LN: 127 | 
1115  	 024B	 B0140001		i0 = xmem[i1]			# LN: 127 | 
1116  	 024C	 00004E00		a0 = a0 << 1			# LN: 127 | 
1117  	 024D	 98D40000		ymem[i0] = a0h			# LN: 127 | 
1118  	 024E				cline_127_0:			/* LN: 128 | CYCLE: 0 | RULES: () */ 
1119  	 024E	 B0040000		i0 = xmem[_centralOutput + 0]			# LN: 128 | 
1120  	 024F	 A1050000		i1 = (0) + (_centralOutput)			# LN: 128 | 
1121  	 0250	 88940000		a0 = ymem[i0]			# LN: 128 | 
1122  	 0251	 B0140001		i0 = xmem[i1]			# LN: 128 | 
1123  	 0252	 00004E00		a0 = a0 << 1			# LN: 128 | 
1124  	 0253	 98D40000		ymem[i0] = a0h			# LN: 128 | 
1125  	 0254				cline_128_0:			/* LN: 129 | CYCLE: 0 | RULES: () */ 
1126  	 0254	 B0040000		i0 = xmem[_lsOutput + 0]			# LN: 129 | 
1127  	 0255	 80040000		x0 = xmem[_input_gain + 0]			# LN: 129 | 
1128  	 0256	 81940000		x1 = ymem[i0]			# LN: 129 | 
1129  	 0257	 A0050000		i0 = (0) + (_lsOutput)			# LN: 129 | 
1130  	 0258	 B0140000		i0 = xmem[i0]			# LN: 129 | 
1131  	 0259	 00002020		a0 = x1 * x0			# LN: 129 | 
1132  	 025A	 88D40000		ymem[i0] = a0			# LN: 129 | 
1133  	 025B				cline_129_0:			/* LN: 130 | CYCLE: 0 | RULES: () */ 
1134  	 025B	 A0050000		i0 = (0) + (_lsOutput)			# LN: 130 | 
1135  	 025C	 B0140000		i0 = xmem[i0]			# LN: 130 | 
1136  	 025D	 00004DC0		a0 = 0			# LN: 130 | 
1137  	 025E	 88D40000		ymem[i0] = a0			# LN: 130 | 
1138  	 025F				cline_130_0:			/* LN: 131 | CYCLE: 0 | RULES: () */ 
1139  	 025F	 B0040000		i0 = xmem[_lsOutput + 0]			# LN: 131 | 
1140  	 0260	 A1050000		i1 = (0) + (_lsOutput)			# LN: 131 | 
1141  	 0261	 88940000		a0 = ymem[i0]			# LN: 131 | 
1142  	 0262	 B0140001		i0 = xmem[i1]			# LN: 131 | 
1143  	 0263	 00004E00		a0 = a0 << 1			# LN: 131 | 
1144  	 0264	 98D40000		ymem[i0] = a0h			# LN: 131 | 
1145  	 0265				cline_131_0:			/* LN: 133 | CYCLE: 0 | RULES: () */ 
1146  	 0265	 B0040000		i0 = xmem[_rightOutput + 0]			# LN: 133 | 
1147  	 0266	 80040000		x0 = xmem[_input_gain + 0]			# LN: 133 | 
1148  	 0267	 81940000		x1 = ymem[i0]			# LN: 133 | 
1149  	 0268	 A0050000		i0 = (0) + (_rightOutput)			# LN: 133 | 
1150  	 0269	 B0140000		i0 = xmem[i0]			# LN: 133 | 
1151  	 026A	 00002020		a0 = x1 * x0			# LN: 133 | 
1152  	 026B	 88D40000		ymem[i0] = a0			# LN: 133 | 
1153  	 026C				cline_133_0:			/* LN: 134 | CYCLE: 0 | RULES: () */ 
1154  	 026C	 B0040000		i0 = xmem[_rightOutput + 0]			# LN: 134 | 
1155  	 026D	 A1050000		i1 = (0) + (_rightOutput)			# LN: 134 | 
1156  	 026E	 88940000		a0 = ymem[i0]			# LN: 134 | 
1157  	 026F	 B0140001		i0 = xmem[i1]			# LN: 134 | 
1158  	 0270	 00004E00		a0 = a0 << 1			# LN: 134 | 
1159  	 0271	 98D40000		ymem[i0] = a0h			# LN: 134 | 
1160  	 0272				cline_134_0:			/* LN: 135 | CYCLE: 0 | RULES: () */ 
1161  	 0272	 A0050000		i0 = (0) + (_rsOutput)			# LN: 135 | 
1162  	 0273	 B0140000		i0 = xmem[i0]			# LN: 135 | 
1163  	 0274	 00004DC0		a0 = 0			# LN: 135 | 
1164  	 0275	 88D40000		ymem[i0] = a0			# LN: 135 | 
1165  	 0276				cline_135_0:			/* LN: 136 | CYCLE: 0 | RULES: () */ 
1166  	 0276	 B0040000		i0 = xmem[_rsOutput + 0]			# LN: 136 | 
1167  	 0277	 A1050000		i1 = (0) + (_rsOutput)			# LN: 136 | 
1168  	 0278	 88940000		a0 = ymem[i0]			# LN: 136 | 
1169  	 0279	 B0140001		i0 = xmem[i1]			# LN: 136 | 
1170  	 027A	 00004E00		a0 = a0 << 1			# LN: 136 | 
1171  	 027B	 98D40000		ymem[i0] = a0h			# LN: 136 | 
1172  	 027C				cline_136_0:			/* LN: 138 | CYCLE: 0 | RULES: () */ 
1173  	 027C	 B0040000		i0 = xmem[_leftOutput + 0]			# LN: 138 | 
1174  	 027D	 00007FFF		nop #empty cycle
1175  	 027E	 02087FFF		i0 += 1			# LN: 138 | 
1176  	 027F	 B0440000		xmem[_leftOutput + 0] = i0			# LN: 138 | 
1177  	 0280				cline_138_0:			/* LN: 139 | CYCLE: 0 | RULES: () */ 
1178  	 0280	 B0040000		i0 = xmem[_rightOutput + 0]			# LN: 139 | 
1179  	 0281	 00007FFF		nop #empty cycle
1180  	 0282	 02087FFF		i0 += 1			# LN: 139 | 
1181  	 0283	 B0440000		xmem[_rightOutput + 0] = i0			# LN: 139 | 
1182  	 0284				cline_139_0:			/* LN: 140 | CYCLE: 0 | RULES: () */ 
1183  	 0284	 B0040000		i0 = xmem[_rsOutput + 0]			# LN: 140 | 
1184  	 0285	 00007FFF		nop #empty cycle
1185  	 0286	 02087FFF		i0 += 1			# LN: 140 | 
1186  	 0287	 B0440000		xmem[_rsOutput + 0] = i0			# LN: 140 | 
1187  	 0288				cline_140_0:			/* LN: 141 | CYCLE: 0 | RULES: () */ 
1188  	 0288	 B0040000		i0 = xmem[_centralOutput + 0]			# LN: 141 | 
1189  	 0289	 00007FFF		nop #empty cycle
1190  	 028A	 02087FFF		i0 += 1			# LN: 141 | 
1191  	 028B	 B0440000		xmem[_centralOutput + 0] = i0			# LN: 141 | 
1192  	 028C				cline_141_0:			/* LN: 142 | CYCLE: 0 | RULES: () */ 
1193  	 028C	 B0040000		i0 = xmem[_lsOutput + 0]			# LN: 142 | 
1194  	 028D	 00007FFF		nop #empty cycle
1195  	 028E	 02087FFF		i0 += 1			# LN: 142 | 
1196  	 028F	 B0440000		xmem[_lsOutput + 0] = i0			# LN: 142 | 
1197  	 0290				cline_142_0:			/* LN: 121 | CYCLE: 0 | RULES: () */ 
1198  	 0290				init_latch_label_3:			/* LN: 143 | CYCLE: 0 | RULES: () */ 
1199  	 0290	 88040000		a0 = xmem[_j + 0]			# LN: 121 | 
1200  	 0291	 894A0001		uhalfword(a1) = (0x1)			# LN: 121 | 
1201  	 0292	 00004408		a0 = a0 + a1			# LN: 121 | 
1202  	 0293	 98440000		xmem[_j + 0] = a0h			# LN: 121 | 
1203  	 0294	 8008022C		jmp (for_3)			# LN: 121 | 
1204  	 0295				cline_121_1:			/* LN: 144 | CYCLE: 0 | RULES: () */ 
1205  	 0295				for_end_3:			/* LN: 121 | CYCLE: 0 | RULES: () */ 
1206  	 0295	 A0050020		i0 = (0) + (_sampleBuffer + 32)			# LN: 144 | 
1207  	 0296	 A1050020		i1 = (0) + (_sampleBuffer + 32)			# LN: 144 | 
1208  	 0297	 80880009		call (_gst_audio_invert_transform)			# LN: 144 | 
1209  	 0298				cline_144_0:			/* LN: 145 | CYCLE: 0 | RULES: () */ 
1210  	 0298	 A0050000		i0 = (0) + (_sampleBuffer + 0)			# LN: 145 | 
1211  	 0299	 A1050000		i1 = (0) + (_sampleBuffer + 0)			# LN: 145 | 
1212  	 029A	 80880009		call (_gst_audio_invert_transform)			# LN: 145 | 
1213  	 029B				cline_145_0:			/* LN: 146 | CYCLE: 0 | RULES: () */ 
1214  	 029B	 8008030E		jmp (switch_end_2)			# LN: 146 | 
1215  	 029C				cline_146_0:			/* LN: 150 | CYCLE: 0 | RULES: () */ 
1216  	 029C				case_5:			/* LN: 149 | CYCLE: 0 | RULES: () */ 
1217  	 029C	 00004DC0		a0 = 0			# LN: 150 | 
1218  	 029D	 98440000		xmem[_j + 0] = a0h			# LN: 150 | 
1219  	 029E				for_4:			/* LN: 150 | CYCLE: 0 | RULES: () */ 
1220  	 029E	 88040000		a0 = xmem[_j + 0]			# LN: 150 | 
1221  	 029F	 894A0010		uhalfword(a1) = (0x10)			# LN: 150 | 
1222  	 02A0	 00004F08		a0 - a1			# LN: 150 | 
1223  	 02A1	 84C80307		if (a >= 0) jmp (for_end_4)			# LN: 150 | 
1224  	 02A2				cline_150_0:			/* LN: 152 | CYCLE: 0 | RULES: () */ 
1225  	 02A2	 B0040000		i0 = xmem[_leftOutput + 0]			# LN: 152 | 
1226  	 02A3	 80040000		x0 = xmem[_input_gain + 0]			# LN: 152 | 
1227  	 02A4	 81940000		x1 = ymem[i0]			# LN: 152 | 
1228  	 02A5	 A0050000		i0 = (0) + (_leftOutput)			# LN: 152 | 
1229  	 02A6	 B0140000		i0 = xmem[i0]			# LN: 152 | 
1230  	 02A7	 00002020		a0 = x1 * x0			# LN: 152 | 
1231  	 02A8	 88D40000		ymem[i0] = a0			# LN: 152 | 
1232  	 02A9				cline_152_0:			/* LN: 153 | CYCLE: 0 | RULES: () */ 
1233  	 02A9	 B0040000		i0 = xmem[_leftOutput + 0]			# LN: 153 | 
1234  	 02AA	 A1050000		i1 = (0) + (_leftOutput)			# LN: 153 | 
1235  	 02AB	 88940000		a0 = ymem[i0]			# LN: 153 | 
1236  	 02AC	 B0140001		i0 = xmem[i1]			# LN: 153 | 
1237  	 02AD	 00004E00		a0 = a0 << 1			# LN: 153 | 
1238  	 02AE	 98D40000		ymem[i0] = a0h			# LN: 153 | 
1239  	 02AF				cline_153_0:			/* LN: 154 | CYCLE: 0 | RULES: () */ 
1240  	 02AF	 B0040000		i0 = xmem[_centralOutput + 0]			# LN: 154 | 
1241  	 02B0	 80040000		x0 = xmem[_input_gain + 0]			# LN: 154 | 
1242  	 02B1	 81940000		x1 = ymem[i0]			# LN: 154 | 
1243  	 02B2	 A0050000		i0 = (0) + (_centralOutput)			# LN: 154 | 
1244  	 02B3	 B0140000		i0 = xmem[i0]			# LN: 154 | 
1245  	 02B4	 00002020		a0 = x1 * x0			# LN: 154 | 
1246  	 02B5	 88D40000		ymem[i0] = a0			# LN: 154 | 
1247  	 02B6				cline_154_0:			/* LN: 155 | CYCLE: 0 | RULES: () */ 
1248  	 02B6	 A0050000		i0 = (0) + (_centralOutput)			# LN: 155 | 
1249  	 02B7	 B0140000		i0 = xmem[i0]			# LN: 155 | 
1250  	 02B8	 00004DC0		a0 = 0			# LN: 155 | 
1251  	 02B9	 88D40000		ymem[i0] = a0			# LN: 155 | 
1252  	 02BA				cline_155_0:			/* LN: 156 | CYCLE: 0 | RULES: () */ 
1253  	 02BA	 B0040000		i0 = xmem[_centralOutput + 0]			# LN: 156 | 
1254  	 02BB	 A1050000		i1 = (0) + (_centralOutput)			# LN: 156 | 
1255  	 02BC	 88940000		a0 = ymem[i0]			# LN: 156 | 
1256  	 02BD	 B0140001		i0 = xmem[i1]			# LN: 156 | 
1257  	 02BE	 00004E00		a0 = a0 << 1			# LN: 156 | 
1258  	 02BF	 98D40000		ymem[i0] = a0h			# LN: 156 | 
1259  	 02C0				cline_156_0:			/* LN: 157 | CYCLE: 0 | RULES: () */ 
1260  	 02C0	 B0040000		i0 = xmem[_centralOutput + 0]			# LN: 157 | 
1261  	 02C1	 A1050000		i1 = (0) + (_centralOutput)			# LN: 157 | 
1262  	 02C2	 88940000		a0 = ymem[i0]			# LN: 157 | 
1263  	 02C3	 B0140001		i0 = xmem[i1]			# LN: 157 | 
1264  	 02C4	 00004E00		a0 = a0 << 1			# LN: 157 | 
1265  	 02C5	 98D40000		ymem[i0] = a0h			# LN: 157 | 
1266  	 02C6				cline_157_0:			/* LN: 158 | CYCLE: 0 | RULES: () */ 
1267  	 02C6	 B0040000		i0 = xmem[_lsOutput + 0]			# LN: 158 | 
1268  	 02C7	 80040000		x0 = xmem[_input_gain + 0]			# LN: 158 | 
1269  	 02C8	 81940000		x1 = ymem[i0]			# LN: 158 | 
1270  	 02C9	 A0050000		i0 = (0) + (_lsOutput)			# LN: 158 | 
1271  	 02CA	 B0140000		i0 = xmem[i0]			# LN: 158 | 
1272  	 02CB	 00002020		a0 = x1 * x0			# LN: 158 | 
1273  	 02CC	 88D40000		ymem[i0] = a0			# LN: 158 | 
1274  	 02CD				cline_158_0:			/* LN: 159 | CYCLE: 0 | RULES: () */ 
1275  	 02CD	 A0050000		i0 = (0) + (_lsOutput)			# LN: 159 | 
1276  	 02CE	 B0140000		i0 = xmem[i0]			# LN: 159 | 
1277  	 02CF	 00004DC0		a0 = 0			# LN: 159 | 
1278  	 02D0	 88D40000		ymem[i0] = a0			# LN: 159 | 
1279  	 02D1				cline_159_0:			/* LN: 160 | CYCLE: 0 | RULES: () */ 
1280  	 02D1	 B0040000		i0 = xmem[_lsOutput + 0]			# LN: 160 | 
1281  	 02D2	 A1050000		i1 = (0) + (_lsOutput)			# LN: 160 | 
1282  	 02D3	 88940000		a0 = ymem[i0]			# LN: 160 | 
1283  	 02D4	 B0140001		i0 = xmem[i1]			# LN: 160 | 
1284  	 02D5	 00004E00		a0 = a0 << 1			# LN: 160 | 
1285  	 02D6	 98D40000		ymem[i0] = a0h			# LN: 160 | 
1286  	 02D7				cline_160_0:			/* LN: 162 | CYCLE: 0 | RULES: () */ 
1287  	 02D7	 B0040000		i0 = xmem[_rightOutput + 0]			# LN: 162 | 
1288  	 02D8	 80040000		x0 = xmem[_input_gain + 0]			# LN: 162 | 
1289  	 02D9	 81940000		x1 = ymem[i0]			# LN: 162 | 
1290  	 02DA	 A0050000		i0 = (0) + (_rightOutput)			# LN: 162 | 
1291  	 02DB	 B0140000		i0 = xmem[i0]			# LN: 162 | 
1292  	 02DC	 00002020		a0 = x1 * x0			# LN: 162 | 
1293  	 02DD	 88D40000		ymem[i0] = a0			# LN: 162 | 
1294  	 02DE				cline_162_0:			/* LN: 163 | CYCLE: 0 | RULES: () */ 
1295  	 02DE	 B0040000		i0 = xmem[_rightOutput + 0]			# LN: 163 | 
1296  	 02DF	 A1050000		i1 = (0) + (_rightOutput)			# LN: 163 | 
1297  	 02E0	 88940000		a0 = ymem[i0]			# LN: 163 | 
1298  	 02E1	 B0140001		i0 = xmem[i1]			# LN: 163 | 
1299  	 02E2	 00004E00		a0 = a0 << 1			# LN: 163 | 
1300  	 02E3	 98D40000		ymem[i0] = a0h			# LN: 163 | 
1301  	 02E4				cline_163_0:			/* LN: 164 | CYCLE: 0 | RULES: () */ 
1302  	 02E4	 A0050000		i0 = (0) + (_rsOutput)			# LN: 164 | 
1303  	 02E5	 B0140000		i0 = xmem[i0]			# LN: 164 | 
1304  	 02E6	 00004DC0		a0 = 0			# LN: 164 | 
1305  	 02E7	 88D40000		ymem[i0] = a0			# LN: 164 | 
1306  	 02E8				cline_164_0:			/* LN: 165 | CYCLE: 0 | RULES: () */ 
1307  	 02E8	 B0040000		i0 = xmem[_rsOutput + 0]			# LN: 165 | 
1308  	 02E9	 A1050000		i1 = (0) + (_rsOutput)			# LN: 165 | 
1309  	 02EA	 88940000		a0 = ymem[i0]			# LN: 165 | 
1310  	 02EB	 B0140001		i0 = xmem[i1]			# LN: 165 | 
1311  	 02EC	 00004E00		a0 = a0 << 1			# LN: 165 | 
1312  	 02ED	 98D40000		ymem[i0] = a0h			# LN: 165 | 
1313  	 02EE				cline_165_0:			/* LN: 167 | CYCLE: 0 | RULES: () */ 
1314  	 02EE	 B0040000		i0 = xmem[_leftOutput + 0]			# LN: 167 | 
1315  	 02EF	 00007FFF		nop #empty cycle
1316  	 02F0	 02087FFF		i0 += 1			# LN: 167 | 
1317  	 02F1	 B0440000		xmem[_leftOutput + 0] = i0			# LN: 167 | 
1318  	 02F2				cline_167_0:			/* LN: 168 | CYCLE: 0 | RULES: () */ 
1319  	 02F2	 B0040000		i0 = xmem[_rightOutput + 0]			# LN: 168 | 
1320  	 02F3	 00007FFF		nop #empty cycle
1321  	 02F4	 02087FFF		i0 += 1			# LN: 168 | 
1322  	 02F5	 B0440000		xmem[_rightOutput + 0] = i0			# LN: 168 | 
1323  	 02F6				cline_168_0:			/* LN: 169 | CYCLE: 0 | RULES: () */ 
1324  	 02F6	 B0040000		i0 = xmem[_rsOutput + 0]			# LN: 169 | 
1325  	 02F7	 00007FFF		nop #empty cycle
1326  	 02F8	 02087FFF		i0 += 1			# LN: 169 | 
1327  	 02F9	 B0440000		xmem[_rsOutput + 0] = i0			# LN: 169 | 
1328  	 02FA				cline_169_0:			/* LN: 170 | CYCLE: 0 | RULES: () */ 
1329  	 02FA	 B0040000		i0 = xmem[_centralOutput + 0]			# LN: 170 | 
1330  	 02FB	 00007FFF		nop #empty cycle
1331  	 02FC	 02087FFF		i0 += 1			# LN: 170 | 
1332  	 02FD	 B0440000		xmem[_centralOutput + 0] = i0			# LN: 170 | 
1333  	 02FE				cline_170_0:			/* LN: 171 | CYCLE: 0 | RULES: () */ 
1334  	 02FE	 B0040000		i0 = xmem[_lsOutput + 0]			# LN: 171 | 
1335  	 02FF	 00007FFF		nop #empty cycle
1336  	 0300	 02087FFF		i0 += 1			# LN: 171 | 
1337  	 0301	 B0440000		xmem[_lsOutput + 0] = i0			# LN: 171 | 
1338  	 0302				cline_171_0:			/* LN: 150 | CYCLE: 0 | RULES: () */ 
1339  	 0302				init_latch_label_4:			/* LN: 172 | CYCLE: 0 | RULES: () */ 
1340  	 0302	 88040000		a0 = xmem[_j + 0]			# LN: 150 | 
1341  	 0303	 894A0001		uhalfword(a1) = (0x1)			# LN: 150 | 
1342  	 0304	 00004408		a0 = a0 + a1			# LN: 150 | 
1343  	 0305	 98440000		xmem[_j + 0] = a0h			# LN: 150 | 
1344  	 0306	 8008029E		jmp (for_4)			# LN: 150 | 
1345  	 0307				cline_150_1:			/* LN: 173 | CYCLE: 0 | RULES: () */ 
1346  	 0307				for_end_4:			/* LN: 150 | CYCLE: 0 | RULES: () */ 
1347  	 0307	 A0050020		i0 = (0) + (_sampleBuffer + 32)			# LN: 173 | 
1348  	 0308	 A1050020		i1 = (0) + (_sampleBuffer + 32)			# LN: 173 | 
1349  	 0309	 80880009		call (_gst_audio_invert_transform)			# LN: 173 | 
1350  	 030A				cline_173_0:			/* LN: 174 | CYCLE: 0 | RULES: () */ 
1351  	 030A	 A0050000		i0 = (0) + (_sampleBuffer + 0)			# LN: 174 | 
1352  	 030B	 A1050000		i1 = (0) + (_sampleBuffer + 0)			# LN: 174 | 
1353  	 030C	 80880009		call (_gst_audio_invert_transform)			# LN: 174 | 
1354  	 030D				cline_174_0:			/* LN: 175 | CYCLE: 0 | RULES: () */ 
1355  	 030D	 8008030E		jmp (switch_end_2)			# LN: 175 | 
1356  	 030E				cline_175_0:			/* LN: 178 | CYCLE: 0 | RULES: () */ 
1357  	 030E				switch_end_2:			/* LN: 118 | CYCLE: 0 | RULES: () */ 
1358  	 030E	 80080507		jmp (switch_end_0)			# LN: 178 | 
1359  	 030F				cline_178_0:			/* LN: 181 | CYCLE: 0 | RULES: () */ 
1360  	 030F				switch_3:			/* LN: 181 | CYCLE: 0 | RULES: () */ 
1361  	 030F				case_6:			/* LN: 180 | CYCLE: 0 | RULES: () */ 
1362  	 030F	 88040000		a0 = xmem[_mode_switch + 0]			# LN: 181 | 
1363  	 0310	 00004E80		a0 & a0			# LN: 181 | 
1364  	 0311	 84080395		if (a == 0) jmp (case_8)			# LN: 181 | 
1365  	 0312	 88040000		a0 = xmem[_mode_switch + 0]			# LN: 181 | 
1366  	 0313	 894A0001		uhalfword(a1) = (0x1)			# LN: 181 | 
1367  	 0314	 00004F08		a0 - a1			# LN: 181 | 
1368  	 0315	 84080317		if (a == 0) jmp (case_7)			# LN: 181 | 
1369  	 0316	 80080413		jmp (switch_end_3)			# LN: 181 | 
1370  	 0317				cline_181_0:			/* LN: 184 | CYCLE: 0 | RULES: () */ 
1371  	 0317				case_7:			/* LN: 183 | CYCLE: 0 | RULES: () */ 
1372  	 0317	 00004DC0		a0 = 0			# LN: 184 | 
1373  	 0318	 98440000		xmem[_j + 0] = a0h			# LN: 184 | 
1374  	 0319				for_5:			/* LN: 184 | CYCLE: 0 | RULES: () */ 
1375  	 0319	 88040000		a0 = xmem[_j + 0]			# LN: 184 | 
1376  	 031A	 894A0010		uhalfword(a1) = (0x10)			# LN: 184 | 
1377  	 031B	 00004F08		a0 - a1			# LN: 184 | 
1378  	 031C	 84C8038E		if (a >= 0) jmp (for_end_5)			# LN: 184 | 
1379  	 031D				cline_184_0:			/* LN: 186 | CYCLE: 0 | RULES: () */ 
1380  	 031D	 B0040000		i0 = xmem[_leftOutput + 0]			# LN: 186 | 
1381  	 031E	 80040000		x0 = xmem[_input_gain + 0]			# LN: 186 | 
1382  	 031F	 81940000		x1 = ymem[i0]			# LN: 186 | 
1383  	 0320	 A0050000		i0 = (0) + (_leftOutput)			# LN: 186 | 
1384  	 0321	 B0140000		i0 = xmem[i0]			# LN: 186 | 
1385  	 0322	 00002020		a0 = x1 * x0			# LN: 186 | 
1386  	 0323	 88D40000		ymem[i0] = a0			# LN: 186 | 
1387  	 0324				cline_186_0:			/* LN: 187 | CYCLE: 0 | RULES: () */ 
1388  	 0324	 B0040000		i0 = xmem[_leftOutput + 0]			# LN: 187 | 
1389  	 0325	 A1050000		i1 = (0) + (_leftOutput)			# LN: 187 | 
1390  	 0326	 88940000		a0 = ymem[i0]			# LN: 187 | 
1391  	 0327	 B0140001		i0 = xmem[i1]			# LN: 187 | 
1392  	 0328	 00004E00		a0 = a0 << 1			# LN: 187 | 
1393  	 0329	 98D40000		ymem[i0] = a0h			# LN: 187 | 
1394  	 032A				cline_187_0:			/* LN: 188 | CYCLE: 0 | RULES: () */ 
1395  	 032A	 B0040000		i0 = xmem[_centralOutput + 0]			# LN: 188 | 
1396  	 032B	 80040000		x0 = xmem[_input_gain + 0]			# LN: 188 | 
1397  	 032C	 81940000		x1 = ymem[i0]			# LN: 188 | 
1398  	 032D	 A0050000		i0 = (0) + (_centralOutput)			# LN: 188 | 
1399  	 032E	 B0140000		i0 = xmem[i0]			# LN: 188 | 
1400  	 032F	 00002020		a0 = x1 * x0			# LN: 188 | 
1401  	 0330	 88D40000		ymem[i0] = a0			# LN: 188 | 
1402  	 0331				cline_188_0:			/* LN: 189 | CYCLE: 0 | RULES: () */ 
1403  	 0331	 A0050000		i0 = (0) + (_centralOutput)			# LN: 189 | 
1404  	 0332	 B0140000		i0 = xmem[i0]			# LN: 189 | 
1405  	 0333	 00004DC0		a0 = 0			# LN: 189 | 
1406  	 0334	 88D40000		ymem[i0] = a0			# LN: 189 | 
1407  	 0335				cline_189_0:			/* LN: 190 | CYCLE: 0 | RULES: () */ 
1408  	 0335	 B0040000		i0 = xmem[_centralOutput + 0]			# LN: 190 | 
1409  	 0336	 A1050000		i1 = (0) + (_centralOutput)			# LN: 190 | 
1410  	 0337	 88940000		a0 = ymem[i0]			# LN: 190 | 
1411  	 0338	 B0140001		i0 = xmem[i1]			# LN: 190 | 
1412  	 0339	 00004E00		a0 = a0 << 1			# LN: 190 | 
1413  	 033A	 98D40000		ymem[i0] = a0h			# LN: 190 | 
1414  	 033B				cline_190_0:			/* LN: 191 | CYCLE: 0 | RULES: () */ 
1415  	 033B	 B0040000		i0 = xmem[_centralOutput + 0]			# LN: 191 | 
1416  	 033C	 A1050000		i1 = (0) + (_centralOutput)			# LN: 191 | 
1417  	 033D	 88940000		a0 = ymem[i0]			# LN: 191 | 
1418  	 033E	 B0140001		i0 = xmem[i1]			# LN: 191 | 
1419  	 033F	 00004E00		a0 = a0 << 1			# LN: 191 | 
1420  	 0340	 98D40000		ymem[i0] = a0h			# LN: 191 | 
1421  	 0341				cline_191_0:			/* LN: 192 | CYCLE: 0 | RULES: () */ 
1422  	 0341	 B0040000		i0 = xmem[_lsOutput + 0]			# LN: 192 | 
1423  	 0342	 80040000		x0 = xmem[_input_gain + 0]			# LN: 192 | 
1424  	 0343	 81940000		x1 = ymem[i0]			# LN: 192 | 
1425  	 0344	 A0050000		i0 = (0) + (_lsOutput)			# LN: 192 | 
1426  	 0345	 B0140000		i0 = xmem[i0]			# LN: 192 | 
1427  	 0346	 00002020		a0 = x1 * x0			# LN: 192 | 
1428  	 0347	 88D40000		ymem[i0] = a0			# LN: 192 | 
1429  	 0348				cline_192_0:			/* LN: 193 | CYCLE: 0 | RULES: () */ 
1430  	 0348	 B0040000		i0 = xmem[_lsOutput + 0]			# LN: 193 | 
1431  	 0349	 80040000		x0 = xmem[_INPUT_MODE1_LS + 0]			# LN: 193 | 
1432  	 034A	 81940000		x1 = ymem[i0]			# LN: 193 | 
1433  	 034B	 A0050000		i0 = (0) + (_lsOutput)			# LN: 193 | 
1434  	 034C	 B0140000		i0 = xmem[i0]			# LN: 193 | 
1435  	 034D	 00002020		a0 = x1 * x0			# LN: 193 | 
1436  	 034E	 88D40000		ymem[i0] = a0			# LN: 193 | 
1437  	 034F				cline_193_0:			/* LN: 194 | CYCLE: 0 | RULES: () */ 
1438  	 034F	 B0040000		i0 = xmem[_lsOutput + 0]			# LN: 194 | 
1439  	 0350	 A1050000		i1 = (0) + (_lsOutput)			# LN: 194 | 
1440  	 0351	 88940000		a0 = ymem[i0]			# LN: 194 | 
1441  	 0352	 B0140001		i0 = xmem[i1]			# LN: 194 | 
1442  	 0353	 00004E00		a0 = a0 << 1			# LN: 194 | 
1443  	 0354	 98D40000		ymem[i0] = a0h			# LN: 194 | 
1444  	 0355				cline_194_0:			/* LN: 196 | CYCLE: 0 | RULES: () */ 
1445  	 0355	 B0040000		i0 = xmem[_rightOutput + 0]			# LN: 196 | 
1446  	 0356	 80040000		x0 = xmem[_input_gain + 0]			# LN: 196 | 
1447  	 0357	 81940000		x1 = ymem[i0]			# LN: 196 | 
1448  	 0358	 A0050000		i0 = (0) + (_rightOutput)			# LN: 196 | 
1449  	 0359	 B0140000		i0 = xmem[i0]			# LN: 196 | 
1450  	 035A	 00002020		a0 = x1 * x0			# LN: 196 | 
1451  	 035B	 88D40000		ymem[i0] = a0			# LN: 196 | 
1452  	 035C				cline_196_0:			/* LN: 197 | CYCLE: 0 | RULES: () */ 
1453  	 035C	 B0040000		i0 = xmem[_rightOutput + 0]			# LN: 197 | 
1454  	 035D	 A1050000		i1 = (0) + (_rightOutput)			# LN: 197 | 
1455  	 035E	 88940000		a0 = ymem[i0]			# LN: 197 | 
1456  	 035F	 B0140001		i0 = xmem[i1]			# LN: 197 | 
1457  	 0360	 00004E00		a0 = a0 << 1			# LN: 197 | 
1458  	 0361	 98D40000		ymem[i0] = a0h			# LN: 197 | 
1459  	 0362				cline_197_0:			/* LN: 198 | CYCLE: 0 | RULES: () */ 
1460  	 0362	 B0040000		i0 = xmem[_rsOutput + 0]			# LN: 198 | 
1461  	 0363	 80040000		x0 = xmem[_input_gain + 0]			# LN: 198 | 
1462  	 0364	 886AFFFF		halfword(a0) = (0xffff)			# LN: 198 | 
1463  	 0365	 81940000		x1 = ymem[i0]			# LN: 198 | 
1464  	 0366	 00002024		b0 = x1 * x0			# LN: 198 | 
1465  	 0367	 80880000		call (__int_to_laccum)			# LN: 198 | 
1466  	 0368	 00005C21		a1 =+ b0; b1 =+ a0			# LN: 198, 198 | 
1467  	 0369	 00004C28		a0 =+ b1			# LN: 198 | 
1468  	 036A	 80880000		call (__mul_sat_laccum)			# LN: 198 | 
1469  	 036B	 A0050000		i0 = (0) + (_rsOutput)			# LN: 198 | 
1470  	 036C	 B0140000		i0 = xmem[i0]			# LN: 198 | 
1471  	 036D	 00007FFF		nop #empty cycle
1472  	 036E	 88D40000		ymem[i0] = a0			# LN: 198 | 
1473  	 036F				cline_198_0:			/* LN: 199 | CYCLE: 0 | RULES: () */ 
1474  	 036F	 B0040000		i0 = xmem[_rsOutput + 0]			# LN: 199 | 
1475  	 0370	 A1050000		i1 = (0) + (_rsOutput)			# LN: 199 | 
1476  	 0371	 88940000		a0 = ymem[i0]			# LN: 199 | 
1477  	 0372	 B0140001		i0 = xmem[i1]			# LN: 199 | 
1478  	 0373	 00004E00		a0 = a0 << 1			# LN: 199 | 
1479  	 0374	 98D40000		ymem[i0] = a0h			# LN: 199 | 
1480  	 0375				cline_199_0:			/* LN: 201 | CYCLE: 0 | RULES: () */ 
1481  	 0375	 B0040000		i0 = xmem[_leftOutput + 0]			# LN: 201 | 
1482  	 0376	 00007FFF		nop #empty cycle
1483  	 0377	 02087FFF		i0 += 1			# LN: 201 | 
1484  	 0378	 B0440000		xmem[_leftOutput + 0] = i0			# LN: 201 | 
1485  	 0379				cline_201_0:			/* LN: 202 | CYCLE: 0 | RULES: () */ 
1486  	 0379	 B0040000		i0 = xmem[_rightOutput + 0]			# LN: 202 | 
1487  	 037A	 00007FFF		nop #empty cycle
1488  	 037B	 02087FFF		i0 += 1			# LN: 202 | 
1489  	 037C	 B0440000		xmem[_rightOutput + 0] = i0			# LN: 202 | 
1490  	 037D				cline_202_0:			/* LN: 203 | CYCLE: 0 | RULES: () */ 
1491  	 037D	 B0040000		i0 = xmem[_rsOutput + 0]			# LN: 203 | 
1492  	 037E	 00007FFF		nop #empty cycle
1493  	 037F	 02087FFF		i0 += 1			# LN: 203 | 
1494  	 0380	 B0440000		xmem[_rsOutput + 0] = i0			# LN: 203 | 
1495  	 0381				cline_203_0:			/* LN: 204 | CYCLE: 0 | RULES: () */ 
1496  	 0381	 B0040000		i0 = xmem[_centralOutput + 0]			# LN: 204 | 
1497  	 0382	 00007FFF		nop #empty cycle
1498  	 0383	 02087FFF		i0 += 1			# LN: 204 | 
1499  	 0384	 B0440000		xmem[_centralOutput + 0] = i0			# LN: 204 | 
1500  	 0385				cline_204_0:			/* LN: 205 | CYCLE: 0 | RULES: () */ 
1501  	 0385	 B0040000		i0 = xmem[_lsOutput + 0]			# LN: 205 | 
1502  	 0386	 00007FFF		nop #empty cycle
1503  	 0387	 02087FFF		i0 += 1			# LN: 205 | 
1504  	 0388	 B0440000		xmem[_lsOutput + 0] = i0			# LN: 205 | 
1505  	 0389				cline_205_0:			/* LN: 184 | CYCLE: 0 | RULES: () */ 
1506  	 0389				init_latch_label_5:			/* LN: 206 | CYCLE: 0 | RULES: () */ 
1507  	 0389	 88040000		a0 = xmem[_j + 0]			# LN: 184 | 
1508  	 038A	 894A0001		uhalfword(a1) = (0x1)			# LN: 184 | 
1509  	 038B	 00004408		a0 = a0 + a1			# LN: 184 | 
1510  	 038C	 98440000		xmem[_j + 0] = a0h			# LN: 184 | 
1511  	 038D	 80080319		jmp (for_5)			# LN: 184 | 
1512  	 038E				cline_184_1:			/* LN: 207 | CYCLE: 0 | RULES: () */ 
1513  	 038E				for_end_5:			/* LN: 184 | CYCLE: 0 | RULES: () */ 
1514  	 038E	 A0050020		i0 = (0) + (_sampleBuffer + 32)			# LN: 207 | 
1515  	 038F	 A1050020		i1 = (0) + (_sampleBuffer + 32)			# LN: 207 | 
1516  	 0390	 80880009		call (_gst_audio_invert_transform)			# LN: 207 | 
1517  	 0391				cline_207_0:			/* LN: 208 | CYCLE: 0 | RULES: () */ 
1518  	 0391	 A0050000		i0 = (0) + (_sampleBuffer + 0)			# LN: 208 | 
1519  	 0392	 A1050000		i1 = (0) + (_sampleBuffer + 0)			# LN: 208 | 
1520  	 0393	 80880009		call (_gst_audio_invert_transform)			# LN: 208 | 
1521  	 0394				cline_208_0:			/* LN: 209 | CYCLE: 0 | RULES: () */ 
1522  	 0394	 80080413		jmp (switch_end_3)			# LN: 209 | 
1523  	 0395				cline_209_0:			/* LN: 213 | CYCLE: 0 | RULES: () */ 
1524  	 0395				case_8:			/* LN: 212 | CYCLE: 0 | RULES: () */ 
1525  	 0395	 00004DC0		a0 = 0			# LN: 213 | 
1526  	 0396	 98440000		xmem[_j + 0] = a0h			# LN: 213 | 
1527  	 0397				for_6:			/* LN: 213 | CYCLE: 0 | RULES: () */ 
1528  	 0397	 88040000		a0 = xmem[_j + 0]			# LN: 213 | 
1529  	 0398	 894A0010		uhalfword(a1) = (0x10)			# LN: 213 | 
1530  	 0399	 00004F08		a0 - a1			# LN: 213 | 
1531  	 039A	 84C8040C		if (a >= 0) jmp (for_end_6)			# LN: 213 | 
1532  	 039B				cline_213_0:			/* LN: 215 | CYCLE: 0 | RULES: () */ 
1533  	 039B	 B0040000		i0 = xmem[_leftOutput + 0]			# LN: 215 | 
1534  	 039C	 80040000		x0 = xmem[_input_gain + 0]			# LN: 215 | 
1535  	 039D	 81940000		x1 = ymem[i0]			# LN: 215 | 
1536  	 039E	 A0050000		i0 = (0) + (_leftOutput)			# LN: 215 | 
1537  	 039F	 B0140000		i0 = xmem[i0]			# LN: 215 | 
1538  	 03A0	 00002020		a0 = x1 * x0			# LN: 215 | 
1539  	 03A1	 88D40000		ymem[i0] = a0			# LN: 215 | 
1540  	 03A2				cline_215_0:			/* LN: 216 | CYCLE: 0 | RULES: () */ 
1541  	 03A2	 B0040000		i0 = xmem[_leftOutput + 0]			# LN: 216 | 
1542  	 03A3	 A1050000		i1 = (0) + (_leftOutput)			# LN: 216 | 
1543  	 03A4	 88940000		a0 = ymem[i0]			# LN: 216 | 
1544  	 03A5	 B0140001		i0 = xmem[i1]			# LN: 216 | 
1545  	 03A6	 00004E00		a0 = a0 << 1			# LN: 216 | 
1546  	 03A7	 98D40000		ymem[i0] = a0h			# LN: 216 | 
1547  	 03A8				cline_216_0:			/* LN: 217 | CYCLE: 0 | RULES: () */ 
1548  	 03A8	 B0040000		i0 = xmem[_centralOutput + 0]			# LN: 217 | 
1549  	 03A9	 80040000		x0 = xmem[_input_gain + 0]			# LN: 217 | 
1550  	 03AA	 81940000		x1 = ymem[i0]			# LN: 217 | 
1551  	 03AB	 A0050000		i0 = (0) + (_centralOutput)			# LN: 217 | 
1552  	 03AC	 B0140000		i0 = xmem[i0]			# LN: 217 | 
1553  	 03AD	 00002020		a0 = x1 * x0			# LN: 217 | 
1554  	 03AE	 88D40000		ymem[i0] = a0			# LN: 217 | 
1555  	 03AF				cline_217_0:			/* LN: 218 | CYCLE: 0 | RULES: () */ 
1556  	 03AF	 A0050000		i0 = (0) + (_centralOutput)			# LN: 218 | 
1557  	 03B0	 B0140000		i0 = xmem[i0]			# LN: 218 | 
1558  	 03B1	 00004DC0		a0 = 0			# LN: 218 | 
1559  	 03B2	 88D40000		ymem[i0] = a0			# LN: 218 | 
1560  	 03B3				cline_218_0:			/* LN: 219 | CYCLE: 0 | RULES: () */ 
1561  	 03B3	 B0040000		i0 = xmem[_centralOutput + 0]			# LN: 219 | 
1562  	 03B4	 A1050000		i1 = (0) + (_centralOutput)			# LN: 219 | 
1563  	 03B5	 88940000		a0 = ymem[i0]			# LN: 219 | 
1564  	 03B6	 B0140001		i0 = xmem[i1]			# LN: 219 | 
1565  	 03B7	 00004E00		a0 = a0 << 1			# LN: 219 | 
1566  	 03B8	 98D40000		ymem[i0] = a0h			# LN: 219 | 
1567  	 03B9				cline_219_0:			/* LN: 220 | CYCLE: 0 | RULES: () */ 
1568  	 03B9	 B0040000		i0 = xmem[_centralOutput + 0]			# LN: 220 | 
1569  	 03BA	 A1050000		i1 = (0) + (_centralOutput)			# LN: 220 | 
1570  	 03BB	 88940000		a0 = ymem[i0]			# LN: 220 | 
1571  	 03BC	 B0140001		i0 = xmem[i1]			# LN: 220 | 
1572  	 03BD	 00004E00		a0 = a0 << 1			# LN: 220 | 
1573  	 03BE	 98D40000		ymem[i0] = a0h			# LN: 220 | 
1574  	 03BF				cline_220_0:			/* LN: 221 | CYCLE: 0 | RULES: () */ 
1575  	 03BF	 B0040000		i0 = xmem[_lsOutput + 0]			# LN: 221 | 
1576  	 03C0	 80040000		x0 = xmem[_input_gain + 0]			# LN: 221 | 
1577  	 03C1	 81940000		x1 = ymem[i0]			# LN: 221 | 
1578  	 03C2	 A0050000		i0 = (0) + (_lsOutput)			# LN: 221 | 
1579  	 03C3	 B0140000		i0 = xmem[i0]			# LN: 221 | 
1580  	 03C4	 00002020		a0 = x1 * x0			# LN: 221 | 
1581  	 03C5	 88D40000		ymem[i0] = a0			# LN: 221 | 
1582  	 03C6				cline_221_0:			/* LN: 222 | CYCLE: 0 | RULES: () */ 
1583  	 03C6	 B0040000		i0 = xmem[_lsOutput + 0]			# LN: 222 | 
1584  	 03C7	 80040000		x0 = xmem[_INPUT_MODE0_LS + 0]			# LN: 222 | 
1585  	 03C8	 81940000		x1 = ymem[i0]			# LN: 222 | 
1586  	 03C9	 A0050000		i0 = (0) + (_lsOutput)			# LN: 222 | 
1587  	 03CA	 B0140000		i0 = xmem[i0]			# LN: 222 | 
1588  	 03CB	 00002020		a0 = x1 * x0			# LN: 222 | 
1589  	 03CC	 88D40000		ymem[i0] = a0			# LN: 222 | 
1590  	 03CD				cline_222_0:			/* LN: 223 | CYCLE: 0 | RULES: () */ 
1591  	 03CD	 B0040000		i0 = xmem[_lsOutput + 0]			# LN: 223 | 
1592  	 03CE	 A1050000		i1 = (0) + (_lsOutput)			# LN: 223 | 
1593  	 03CF	 88940000		a0 = ymem[i0]			# LN: 223 | 
1594  	 03D0	 B0140001		i0 = xmem[i1]			# LN: 223 | 
1595  	 03D1	 00004E00		a0 = a0 << 1			# LN: 223 | 
1596  	 03D2	 98D40000		ymem[i0] = a0h			# LN: 223 | 
1597  	 03D3				cline_223_0:			/* LN: 225 | CYCLE: 0 | RULES: () */ 
1598  	 03D3	 B0040000		i0 = xmem[_rightOutput + 0]			# LN: 225 | 
1599  	 03D4	 80040000		x0 = xmem[_input_gain + 0]			# LN: 225 | 
1600  	 03D5	 81940000		x1 = ymem[i0]			# LN: 225 | 
1601  	 03D6	 A0050000		i0 = (0) + (_rightOutput)			# LN: 225 | 
1602  	 03D7	 B0140000		i0 = xmem[i0]			# LN: 225 | 
1603  	 03D8	 00002020		a0 = x1 * x0			# LN: 225 | 
1604  	 03D9	 88D40000		ymem[i0] = a0			# LN: 225 | 
1605  	 03DA				cline_225_0:			/* LN: 226 | CYCLE: 0 | RULES: () */ 
1606  	 03DA	 B0040000		i0 = xmem[_rightOutput + 0]			# LN: 226 | 
1607  	 03DB	 A1050000		i1 = (0) + (_rightOutput)			# LN: 226 | 
1608  	 03DC	 88940000		a0 = ymem[i0]			# LN: 226 | 
1609  	 03DD	 B0140001		i0 = xmem[i1]			# LN: 226 | 
1610  	 03DE	 00004E00		a0 = a0 << 1			# LN: 226 | 
1611  	 03DF	 98D40000		ymem[i0] = a0h			# LN: 226 | 
1612  	 03E0				cline_226_0:			/* LN: 227 | CYCLE: 0 | RULES: () */ 
1613  	 03E0	 B0040000		i0 = xmem[_rsOutput + 0]			# LN: 227 | 
1614  	 03E1	 80040000		x0 = xmem[_input_gain + 0]			# LN: 227 | 
1615  	 03E2	 886AFFFF		halfword(a0) = (0xffff)			# LN: 227 | 
1616  	 03E3	 81940000		x1 = ymem[i0]			# LN: 227 | 
1617  	 03E4	 00002024		b0 = x1 * x0			# LN: 227 | 
1618  	 03E5	 80880000		call (__int_to_laccum)			# LN: 227 | 
1619  	 03E6	 00005C21		a1 =+ b0; b1 =+ a0			# LN: 227, 227 | 
1620  	 03E7	 00004C28		a0 =+ b1			# LN: 227 | 
1621  	 03E8	 80880000		call (__mul_sat_laccum)			# LN: 227 | 
1622  	 03E9	 A0050000		i0 = (0) + (_rsOutput)			# LN: 227 | 
1623  	 03EA	 B0140000		i0 = xmem[i0]			# LN: 227 | 
1624  	 03EB	 00007FFF		nop #empty cycle
1625  	 03EC	 88D40000		ymem[i0] = a0			# LN: 227 | 
1626  	 03ED				cline_227_0:			/* LN: 228 | CYCLE: 0 | RULES: () */ 
1627  	 03ED	 B0040000		i0 = xmem[_rsOutput + 0]			# LN: 228 | 
1628  	 03EE	 A1050000		i1 = (0) + (_rsOutput)			# LN: 228 | 
1629  	 03EF	 88940000		a0 = ymem[i0]			# LN: 228 | 
1630  	 03F0	 B0140001		i0 = xmem[i1]			# LN: 228 | 
1631  	 03F1	 00004E00		a0 = a0 << 1			# LN: 228 | 
1632  	 03F2	 98D40000		ymem[i0] = a0h			# LN: 228 | 
1633  	 03F3				cline_228_0:			/* LN: 230 | CYCLE: 0 | RULES: () */ 
1634  	 03F3	 B0040000		i0 = xmem[_leftOutput + 0]			# LN: 230 | 
1635  	 03F4	 00007FFF		nop #empty cycle
1636  	 03F5	 02087FFF		i0 += 1			# LN: 230 | 
1637  	 03F6	 B0440000		xmem[_leftOutput + 0] = i0			# LN: 230 | 
1638  	 03F7				cline_230_0:			/* LN: 231 | CYCLE: 0 | RULES: () */ 
1639  	 03F7	 B0040000		i0 = xmem[_rightOutput + 0]			# LN: 231 | 
1640  	 03F8	 00007FFF		nop #empty cycle
1641  	 03F9	 02087FFF		i0 += 1			# LN: 231 | 
1642  	 03FA	 B0440000		xmem[_rightOutput + 0] = i0			# LN: 231 | 
1643  	 03FB				cline_231_0:			/* LN: 232 | CYCLE: 0 | RULES: () */ 
1644  	 03FB	 B0040000		i0 = xmem[_rsOutput + 0]			# LN: 232 | 
1645  	 03FC	 00007FFF		nop #empty cycle
1646  	 03FD	 02087FFF		i0 += 1			# LN: 232 | 
1647  	 03FE	 B0440000		xmem[_rsOutput + 0] = i0			# LN: 232 | 
1648  	 03FF				cline_232_0:			/* LN: 233 | CYCLE: 0 | RULES: () */ 
1649  	 03FF	 B0040000		i0 = xmem[_centralOutput + 0]			# LN: 233 | 
1650  	 0400	 00007FFF		nop #empty cycle
1651  	 0401	 02087FFF		i0 += 1			# LN: 233 | 
1652  	 0402	 B0440000		xmem[_centralOutput + 0] = i0			# LN: 233 | 
1653  	 0403				cline_233_0:			/* LN: 234 | CYCLE: 0 | RULES: () */ 
1654  	 0403	 B0040000		i0 = xmem[_lsOutput + 0]			# LN: 234 | 
1655  	 0404	 00007FFF		nop #empty cycle
1656  	 0405	 02087FFF		i0 += 1			# LN: 234 | 
1657  	 0406	 B0440000		xmem[_lsOutput + 0] = i0			# LN: 234 | 
1658  	 0407				cline_234_0:			/* LN: 213 | CYCLE: 0 | RULES: () */ 
1659  	 0407				init_latch_label_6:			/* LN: 235 | CYCLE: 0 | RULES: () */ 
1660  	 0407	 88040000		a0 = xmem[_j + 0]			# LN: 213 | 
1661  	 0408	 894A0001		uhalfword(a1) = (0x1)			# LN: 213 | 
1662  	 0409	 00004408		a0 = a0 + a1			# LN: 213 | 
1663  	 040A	 98440000		xmem[_j + 0] = a0h			# LN: 213 | 
1664  	 040B	 80080397		jmp (for_6)			# LN: 213 | 
1665  	 040C				cline_213_1:			/* LN: 236 | CYCLE: 0 | RULES: () */ 
1666  	 040C				for_end_6:			/* LN: 213 | CYCLE: 0 | RULES: () */ 
1667  	 040C	 A0050020		i0 = (0) + (_sampleBuffer + 32)			# LN: 236 | 
1668  	 040D	 A1050020		i1 = (0) + (_sampleBuffer + 32)			# LN: 236 | 
1669  	 040E	 80880009		call (_gst_audio_invert_transform)			# LN: 236 | 
1670  	 040F				cline_236_0:			/* LN: 237 | CYCLE: 0 | RULES: () */ 
1671  	 040F	 A0050000		i0 = (0) + (_sampleBuffer + 0)			# LN: 237 | 
1672  	 0410	 A1050000		i1 = (0) + (_sampleBuffer + 0)			# LN: 237 | 
1673  	 0411	 80880009		call (_gst_audio_invert_transform)			# LN: 237 | 
1674  	 0412				cline_237_0:			/* LN: 238 | CYCLE: 0 | RULES: () */ 
1675  	 0412	 80080413		jmp (switch_end_3)			# LN: 238 | 
1676  	 0413				cline_238_0:			/* LN: 241 | CYCLE: 0 | RULES: () */ 
1677  	 0413				switch_end_3:			/* LN: 181 | CYCLE: 0 | RULES: () */ 
1678  	 0413	 80080507		jmp (switch_end_0)			# LN: 241 | 
1679  	 0414				cline_241_0:			/* LN: 244 | CYCLE: 0 | RULES: () */ 
1680  	 0414				switch_4:			/* LN: 244 | CYCLE: 0 | RULES: () */ 
1681  	 0414				case_9:			/* LN: 243 | CYCLE: 0 | RULES: () */ 
1682  	 0414	 88040000		a0 = xmem[_mode_switch + 0]			# LN: 244 | 
1683  	 0415	 00004E80		a0 & a0			# LN: 244 | 
1684  	 0416	 84080491		if (a == 0) jmp (case_11)			# LN: 244 | 
1685  	 0417	 88040000		a0 = xmem[_mode_switch + 0]			# LN: 244 | 
1686  	 0418	 894A0001		uhalfword(a1) = (0x1)			# LN: 244 | 
1687  	 0419	 00004F08		a0 - a1			# LN: 244 | 
1688  	 041A	 8408041C		if (a == 0) jmp (case_10)			# LN: 244 | 
1689  	 041B	 80080506		jmp (switch_end_4)			# LN: 244 | 
1690  	 041C				cline_244_0:			/* LN: 247 | CYCLE: 0 | RULES: () */ 
1691  	 041C				case_10:			/* LN: 246 | CYCLE: 0 | RULES: () */ 
1692  	 041C	 00004DC0		a0 = 0			# LN: 247 | 
1693  	 041D	 98440000		xmem[_j + 0] = a0h			# LN: 247 | 
1694  	 041E				for_7:			/* LN: 247 | CYCLE: 0 | RULES: () */ 
1695  	 041E	 88040000		a0 = xmem[_j + 0]			# LN: 247 | 
1696  	 041F	 894A0010		uhalfword(a1) = (0x10)			# LN: 247 | 
1697  	 0420	 00004F08		a0 - a1			# LN: 247 | 
1698  	 0421	 84C8048A		if (a >= 0) jmp (for_end_7)			# LN: 247 | 
1699  	 0422				cline_247_0:			/* LN: 249 | CYCLE: 0 | RULES: () */ 
1700  	 0422	 B0040000		i0 = xmem[_leftOutput + 0]			# LN: 249 | 
1701  	 0423	 80040000		x0 = xmem[_input_gain + 0]			# LN: 249 | 
1702  	 0424	 81940000		x1 = ymem[i0]			# LN: 249 | 
1703  	 0425	 A0050000		i0 = (0) + (_leftOutput)			# LN: 249 | 
1704  	 0426	 B0140000		i0 = xmem[i0]			# LN: 249 | 
1705  	 0427	 00002020		a0 = x1 * x0			# LN: 249 | 
1706  	 0428	 88D40000		ymem[i0] = a0			# LN: 249 | 
1707  	 0429				cline_249_0:			/* LN: 250 | CYCLE: 0 | RULES: () */ 
1708  	 0429	 B0040000		i0 = xmem[_leftOutput + 0]			# LN: 250 | 
1709  	 042A	 A1050000		i1 = (0) + (_leftOutput)			# LN: 250 | 
1710  	 042B	 88940000		a0 = ymem[i0]			# LN: 250 | 
1711  	 042C	 B0140001		i0 = xmem[i1]			# LN: 250 | 
1712  	 042D	 00004E00		a0 = a0 << 1			# LN: 250 | 
1713  	 042E	 98D40000		ymem[i0] = a0h			# LN: 250 | 
1714  	 042F				cline_250_0:			/* LN: 251 | CYCLE: 0 | RULES: () */ 
1715  	 042F	 B0040000		i0 = xmem[_centralOutput + 0]			# LN: 251 | 
1716  	 0430	 80040000		x0 = xmem[_input_gain + 0]			# LN: 251 | 
1717  	 0431	 81940000		x1 = ymem[i0]			# LN: 251 | 
1718  	 0432	 A0050000		i0 = (0) + (_centralOutput)			# LN: 251 | 
1719  	 0433	 B0140000		i0 = xmem[i0]			# LN: 251 | 
1720  	 0434	 00002020		a0 = x1 * x0			# LN: 251 | 
1721  	 0435	 88D40000		ymem[i0] = a0			# LN: 251 | 
1722  	 0436				cline_251_0:			/* LN: 252 | CYCLE: 0 | RULES: () */ 
1723  	 0436	 B0040000		i0 = xmem[_centralOutput + 0]			# LN: 252 | 
1724  	 0437	 80040000		x0 = xmem[_INPUT_MODE1_C + 0]			# LN: 252 | 
1725  	 0438	 81940000		x1 = ymem[i0]			# LN: 252 | 
1726  	 0439	 A0050000		i0 = (0) + (_centralOutput)			# LN: 252 | 
1727  	 043A	 B0140000		i0 = xmem[i0]			# LN: 252 | 
1728  	 043B	 00002020		a0 = x1 * x0			# LN: 252 | 
1729  	 043C	 88D40000		ymem[i0] = a0			# LN: 252 | 
1730  	 043D				cline_252_0:			/* LN: 253 | CYCLE: 0 | RULES: () */ 
1731  	 043D	 B0040000		i0 = xmem[_centralOutput + 0]			# LN: 253 | 
1732  	 043E	 A1050000		i1 = (0) + (_centralOutput)			# LN: 253 | 
1733  	 043F	 88940000		a0 = ymem[i0]			# LN: 253 | 
1734  	 0440	 B0140001		i0 = xmem[i1]			# LN: 253 | 
1735  	 0441	 00004E00		a0 = a0 << 1			# LN: 253 | 
1736  	 0442	 98D40000		ymem[i0] = a0h			# LN: 253 | 
1737  	 0443				cline_253_0:			/* LN: 254 | CYCLE: 0 | RULES: () */ 
1738  	 0443	 B0040000		i0 = xmem[_centralOutput + 0]			# LN: 254 | 
1739  	 0444	 A1050000		i1 = (0) + (_centralOutput)			# LN: 254 | 
1740  	 0445	 88940000		a0 = ymem[i0]			# LN: 254 | 
1741  	 0446	 B0140001		i0 = xmem[i1]			# LN: 254 | 
1742  	 0447	 00004E00		a0 = a0 << 1			# LN: 254 | 
1743  	 0448	 98D40000		ymem[i0] = a0h			# LN: 254 | 
1744  	 0449				cline_254_0:			/* LN: 255 | CYCLE: 0 | RULES: () */ 
1745  	 0449	 B0040000		i0 = xmem[_lsOutput + 0]			# LN: 255 | 
1746  	 044A	 80040000		x0 = xmem[_input_gain + 0]			# LN: 255 | 
1747  	 044B	 81940000		x1 = ymem[i0]			# LN: 255 | 
1748  	 044C	 A0050000		i0 = (0) + (_lsOutput)			# LN: 255 | 
1749  	 044D	 B0140000		i0 = xmem[i0]			# LN: 255 | 
1750  	 044E	 00002020		a0 = x1 * x0			# LN: 255 | 
1751  	 044F	 88D40000		ymem[i0] = a0			# LN: 255 | 
1752  	 0450				cline_255_0:			/* LN: 256 | CYCLE: 0 | RULES: () */ 
1753  	 0450	 A0050000		i0 = (0) + (_lsOutput)			# LN: 256 | 
1754  	 0451	 B0140000		i0 = xmem[i0]			# LN: 256 | 
1755  	 0452	 00004DC0		a0 = 0			# LN: 256 | 
1756  	 0453	 88D40000		ymem[i0] = a0			# LN: 256 | 
1757  	 0454				cline_256_0:			/* LN: 257 | CYCLE: 0 | RULES: () */ 
1758  	 0454	 B0040000		i0 = xmem[_lsOutput + 0]			# LN: 257 | 
1759  	 0455	 A1050000		i1 = (0) + (_lsOutput)			# LN: 257 | 
1760  	 0456	 88940000		a0 = ymem[i0]			# LN: 257 | 
1761  	 0457	 B0140001		i0 = xmem[i1]			# LN: 257 | 
1762  	 0458	 00004E00		a0 = a0 << 1			# LN: 257 | 
1763  	 0459	 98D40000		ymem[i0] = a0h			# LN: 257 | 
1764  	 045A				cline_257_0:			/* LN: 259 | CYCLE: 0 | RULES: () */ 
1765  	 045A	 B0040000		i0 = xmem[_rightOutput + 0]			# LN: 259 | 
1766  	 045B	 80040000		x0 = xmem[_input_gain + 0]			# LN: 259 | 
1767  	 045C	 81940000		x1 = ymem[i0]			# LN: 259 | 
1768  	 045D	 A0050000		i0 = (0) + (_rightOutput)			# LN: 259 | 
1769  	 045E	 B0140000		i0 = xmem[i0]			# LN: 259 | 
1770  	 045F	 00002020		a0 = x1 * x0			# LN: 259 | 
1771  	 0460	 88D40000		ymem[i0] = a0			# LN: 259 | 
1772  	 0461				cline_259_0:			/* LN: 260 | CYCLE: 0 | RULES: () */ 
1773  	 0461	 B0040000		i0 = xmem[_rightOutput + 0]			# LN: 260 | 
1774  	 0462	 A1050000		i1 = (0) + (_rightOutput)			# LN: 260 | 
1775  	 0463	 88940000		a0 = ymem[i0]			# LN: 260 | 
1776  	 0464	 B0140001		i0 = xmem[i1]			# LN: 260 | 
1777  	 0465	 00004E00		a0 = a0 << 1			# LN: 260 | 
1778  	 0466	 98D40000		ymem[i0] = a0h			# LN: 260 | 
1779  	 0467				cline_260_0:			/* LN: 261 | CYCLE: 0 | RULES: () */ 
1780  	 0467	 A0050000		i0 = (0) + (_rsOutput)			# LN: 261 | 
1781  	 0468	 B0140000		i0 = xmem[i0]			# LN: 261 | 
1782  	 0469	 00004DC0		a0 = 0			# LN: 261 | 
1783  	 046A	 88D40000		ymem[i0] = a0			# LN: 261 | 
1784  	 046B				cline_261_0:			/* LN: 262 | CYCLE: 0 | RULES: () */ 
1785  	 046B	 B0040000		i0 = xmem[_rsOutput + 0]			# LN: 262 | 
1786  	 046C	 A1050000		i1 = (0) + (_rsOutput)			# LN: 262 | 
1787  	 046D	 88940000		a0 = ymem[i0]			# LN: 262 | 
1788  	 046E	 B0140001		i0 = xmem[i1]			# LN: 262 | 
1789  	 046F	 00004E00		a0 = a0 << 1			# LN: 262 | 
1790  	 0470	 98D40000		ymem[i0] = a0h			# LN: 262 | 
1791  	 0471				cline_262_0:			/* LN: 264 | CYCLE: 0 | RULES: () */ 
1792  	 0471	 B0040000		i0 = xmem[_leftOutput + 0]			# LN: 264 | 
1793  	 0472	 00007FFF		nop #empty cycle
1794  	 0473	 02087FFF		i0 += 1			# LN: 264 | 
1795  	 0474	 B0440000		xmem[_leftOutput + 0] = i0			# LN: 264 | 
1796  	 0475				cline_264_0:			/* LN: 265 | CYCLE: 0 | RULES: () */ 
1797  	 0475	 B0040000		i0 = xmem[_rightOutput + 0]			# LN: 265 | 
1798  	 0476	 00007FFF		nop #empty cycle
1799  	 0477	 02087FFF		i0 += 1			# LN: 265 | 
1800  	 0478	 B0440000		xmem[_rightOutput + 0] = i0			# LN: 265 | 
1801  	 0479				cline_265_0:			/* LN: 266 | CYCLE: 0 | RULES: () */ 
1802  	 0479	 B0040000		i0 = xmem[_rsOutput + 0]			# LN: 266 | 
1803  	 047A	 00007FFF		nop #empty cycle
1804  	 047B	 02087FFF		i0 += 1			# LN: 266 | 
1805  	 047C	 B0440000		xmem[_rsOutput + 0] = i0			# LN: 266 | 
1806  	 047D				cline_266_0:			/* LN: 267 | CYCLE: 0 | RULES: () */ 
1807  	 047D	 B0040000		i0 = xmem[_centralOutput + 0]			# LN: 267 | 
1808  	 047E	 00007FFF		nop #empty cycle
1809  	 047F	 02087FFF		i0 += 1			# LN: 267 | 
1810  	 0480	 B0440000		xmem[_centralOutput + 0] = i0			# LN: 267 | 
1811  	 0481				cline_267_0:			/* LN: 268 | CYCLE: 0 | RULES: () */ 
1812  	 0481	 B0040000		i0 = xmem[_lsOutput + 0]			# LN: 268 | 
1813  	 0482	 00007FFF		nop #empty cycle
1814  	 0483	 02087FFF		i0 += 1			# LN: 268 | 
1815  	 0484	 B0440000		xmem[_lsOutput + 0] = i0			# LN: 268 | 
1816  	 0485				cline_268_0:			/* LN: 247 | CYCLE: 0 | RULES: () */ 
1817  	 0485				init_latch_label_7:			/* LN: 269 | CYCLE: 0 | RULES: () */ 
1818  	 0485	 88040000		a0 = xmem[_j + 0]			# LN: 247 | 
1819  	 0486	 894A0001		uhalfword(a1) = (0x1)			# LN: 247 | 
1820  	 0487	 00004408		a0 = a0 + a1			# LN: 247 | 
1821  	 0488	 98440000		xmem[_j + 0] = a0h			# LN: 247 | 
1822  	 0489	 8008041E		jmp (for_7)			# LN: 247 | 
1823  	 048A				cline_247_1:			/* LN: 270 | CYCLE: 0 | RULES: () */ 
1824  	 048A				for_end_7:			/* LN: 247 | CYCLE: 0 | RULES: () */ 
1825  	 048A	 A0050020		i0 = (0) + (_sampleBuffer + 32)			# LN: 270 | 
1826  	 048B	 A1050020		i1 = (0) + (_sampleBuffer + 32)			# LN: 270 | 
1827  	 048C	 80880009		call (_gst_audio_invert_transform)			# LN: 270 | 
1828  	 048D				cline_270_0:			/* LN: 271 | CYCLE: 0 | RULES: () */ 
1829  	 048D	 A0050000		i0 = (0) + (_sampleBuffer + 0)			# LN: 271 | 
1830  	 048E	 A1050000		i1 = (0) + (_sampleBuffer + 0)			# LN: 271 | 
1831  	 048F	 80880009		call (_gst_audio_invert_transform)			# LN: 271 | 
1832  	 0490				cline_271_0:			/* LN: 272 | CYCLE: 0 | RULES: () */ 
1833  	 0490	 80080506		jmp (switch_end_4)			# LN: 272 | 
1834  	 0491				cline_272_0:			/* LN: 276 | CYCLE: 0 | RULES: () */ 
1835  	 0491				case_11:			/* LN: 275 | CYCLE: 0 | RULES: () */ 
1836  	 0491	 00004DC0		a0 = 0			# LN: 276 | 
1837  	 0492	 98440000		xmem[_j + 0] = a0h			# LN: 276 | 
1838  	 0493				for_8:			/* LN: 276 | CYCLE: 0 | RULES: () */ 
1839  	 0493	 88040000		a0 = xmem[_j + 0]			# LN: 276 | 
1840  	 0494	 894A0010		uhalfword(a1) = (0x10)			# LN: 276 | 
1841  	 0495	 00004F08		a0 - a1			# LN: 276 | 
1842  	 0496	 84C804FF		if (a >= 0) jmp (for_end_8)			# LN: 276 | 
1843  	 0497				cline_276_0:			/* LN: 278 | CYCLE: 0 | RULES: () */ 
1844  	 0497	 B0040000		i0 = xmem[_leftOutput + 0]			# LN: 278 | 
1845  	 0498	 80040000		x0 = xmem[_input_gain + 0]			# LN: 278 | 
1846  	 0499	 81940000		x1 = ymem[i0]			# LN: 278 | 
1847  	 049A	 A0050000		i0 = (0) + (_leftOutput)			# LN: 278 | 
1848  	 049B	 B0140000		i0 = xmem[i0]			# LN: 278 | 
1849  	 049C	 00002020		a0 = x1 * x0			# LN: 278 | 
1850  	 049D	 88D40000		ymem[i0] = a0			# LN: 278 | 
1851  	 049E				cline_278_0:			/* LN: 279 | CYCLE: 0 | RULES: () */ 
1852  	 049E	 B0040000		i0 = xmem[_leftOutput + 0]			# LN: 279 | 
1853  	 049F	 A1050000		i1 = (0) + (_leftOutput)			# LN: 279 | 
1854  	 04A0	 88940000		a0 = ymem[i0]			# LN: 279 | 
1855  	 04A1	 B0140001		i0 = xmem[i1]			# LN: 279 | 
1856  	 04A2	 00004E00		a0 = a0 << 1			# LN: 279 | 
1857  	 04A3	 98D40000		ymem[i0] = a0h			# LN: 279 | 
1858  	 04A4				cline_279_0:			/* LN: 280 | CYCLE: 0 | RULES: () */ 
1859  	 04A4	 B0040000		i0 = xmem[_centralOutput + 0]			# LN: 280 | 
1860  	 04A5	 80040000		x0 = xmem[_input_gain + 0]			# LN: 280 | 
1861  	 04A6	 81940000		x1 = ymem[i0]			# LN: 280 | 
1862  	 04A7	 A0050000		i0 = (0) + (_centralOutput)			# LN: 280 | 
1863  	 04A8	 B0140000		i0 = xmem[i0]			# LN: 280 | 
1864  	 04A9	 00002020		a0 = x1 * x0			# LN: 280 | 
1865  	 04AA	 88D40000		ymem[i0] = a0			# LN: 280 | 
1866  	 04AB				cline_280_0:			/* LN: 281 | CYCLE: 0 | RULES: () */ 
1867  	 04AB	 B0040000		i0 = xmem[_centralOutput + 0]			# LN: 281 | 
1868  	 04AC	 80040000		x0 = xmem[_INPUT_MODE0_C + 0]			# LN: 281 | 
1869  	 04AD	 81940000		x1 = ymem[i0]			# LN: 281 | 
1870  	 04AE	 A0050000		i0 = (0) + (_centralOutput)			# LN: 281 | 
1871  	 04AF	 B0140000		i0 = xmem[i0]			# LN: 281 | 
1872  	 04B0	 00002020		a0 = x1 * x0			# LN: 281 | 
1873  	 04B1	 88D40000		ymem[i0] = a0			# LN: 281 | 
1874  	 04B2				cline_281_0:			/* LN: 282 | CYCLE: 0 | RULES: () */ 
1875  	 04B2	 B0040000		i0 = xmem[_centralOutput + 0]			# LN: 282 | 
1876  	 04B3	 A1050000		i1 = (0) + (_centralOutput)			# LN: 282 | 
1877  	 04B4	 88940000		a0 = ymem[i0]			# LN: 282 | 
1878  	 04B5	 B0140001		i0 = xmem[i1]			# LN: 282 | 
1879  	 04B6	 00004E00		a0 = a0 << 1			# LN: 282 | 
1880  	 04B7	 98D40000		ymem[i0] = a0h			# LN: 282 | 
1881  	 04B8				cline_282_0:			/* LN: 283 | CYCLE: 0 | RULES: () */ 
1882  	 04B8	 B0040000		i0 = xmem[_centralOutput + 0]			# LN: 283 | 
1883  	 04B9	 A1050000		i1 = (0) + (_centralOutput)			# LN: 283 | 
1884  	 04BA	 88940000		a0 = ymem[i0]			# LN: 283 | 
1885  	 04BB	 B0140001		i0 = xmem[i1]			# LN: 283 | 
1886  	 04BC	 00004E00		a0 = a0 << 1			# LN: 283 | 
1887  	 04BD	 98D40000		ymem[i0] = a0h			# LN: 283 | 
1888  	 04BE				cline_283_0:			/* LN: 284 | CYCLE: 0 | RULES: () */ 
1889  	 04BE	 B0040000		i0 = xmem[_lsOutput + 0]			# LN: 284 | 
1890  	 04BF	 80040000		x0 = xmem[_input_gain + 0]			# LN: 284 | 
1891  	 04C0	 81940000		x1 = ymem[i0]			# LN: 284 | 
1892  	 04C1	 A0050000		i0 = (0) + (_lsOutput)			# LN: 284 | 
1893  	 04C2	 B0140000		i0 = xmem[i0]			# LN: 284 | 
1894  	 04C3	 00002020		a0 = x1 * x0			# LN: 284 | 
1895  	 04C4	 88D40000		ymem[i0] = a0			# LN: 284 | 
1896  	 04C5				cline_284_0:			/* LN: 285 | CYCLE: 0 | RULES: () */ 
1897  	 04C5	 A0050000		i0 = (0) + (_lsOutput)			# LN: 285 | 
1898  	 04C6	 B0140000		i0 = xmem[i0]			# LN: 285 | 
1899  	 04C7	 00004DC0		a0 = 0			# LN: 285 | 
1900  	 04C8	 88D40000		ymem[i0] = a0			# LN: 285 | 
1901  	 04C9				cline_285_0:			/* LN: 286 | CYCLE: 0 | RULES: () */ 
1902  	 04C9	 B0040000		i0 = xmem[_lsOutput + 0]			# LN: 286 | 
1903  	 04CA	 A1050000		i1 = (0) + (_lsOutput)			# LN: 286 | 
1904  	 04CB	 88940000		a0 = ymem[i0]			# LN: 286 | 
1905  	 04CC	 B0140001		i0 = xmem[i1]			# LN: 286 | 
1906  	 04CD	 00004E00		a0 = a0 << 1			# LN: 286 | 
1907  	 04CE	 98D40000		ymem[i0] = a0h			# LN: 286 | 
1908  	 04CF				cline_286_0:			/* LN: 288 | CYCLE: 0 | RULES: () */ 
1909  	 04CF	 B0040000		i0 = xmem[_rightOutput + 0]			# LN: 288 | 
1910  	 04D0	 80040000		x0 = xmem[_input_gain + 0]			# LN: 288 | 
1911  	 04D1	 81940000		x1 = ymem[i0]			# LN: 288 | 
1912  	 04D2	 A0050000		i0 = (0) + (_rightOutput)			# LN: 288 | 
1913  	 04D3	 B0140000		i0 = xmem[i0]			# LN: 288 | 
1914  	 04D4	 00002020		a0 = x1 * x0			# LN: 288 | 
1915  	 04D5	 88D40000		ymem[i0] = a0			# LN: 288 | 
1916  	 04D6				cline_288_0:			/* LN: 289 | CYCLE: 0 | RULES: () */ 
1917  	 04D6	 B0040000		i0 = xmem[_rightOutput + 0]			# LN: 289 | 
1918  	 04D7	 A1050000		i1 = (0) + (_rightOutput)			# LN: 289 | 
1919  	 04D8	 88940000		a0 = ymem[i0]			# LN: 289 | 
1920  	 04D9	 B0140001		i0 = xmem[i1]			# LN: 289 | 
1921  	 04DA	 00004E00		a0 = a0 << 1			# LN: 289 | 
1922  	 04DB	 98D40000		ymem[i0] = a0h			# LN: 289 | 
1923  	 04DC				cline_289_0:			/* LN: 290 | CYCLE: 0 | RULES: () */ 
1924  	 04DC	 A0050000		i0 = (0) + (_rsOutput)			# LN: 290 | 
1925  	 04DD	 B0140000		i0 = xmem[i0]			# LN: 290 | 
1926  	 04DE	 00004DC0		a0 = 0			# LN: 290 | 
1927  	 04DF	 88D40000		ymem[i0] = a0			# LN: 290 | 
1928  	 04E0				cline_290_0:			/* LN: 291 | CYCLE: 0 | RULES: () */ 
1929  	 04E0	 B0040000		i0 = xmem[_rsOutput + 0]			# LN: 291 | 
1930  	 04E1	 A1050000		i1 = (0) + (_rsOutput)			# LN: 291 | 
1931  	 04E2	 88940000		a0 = ymem[i0]			# LN: 291 | 
1932  	 04E3	 B0140001		i0 = xmem[i1]			# LN: 291 | 
1933  	 04E4	 00004E00		a0 = a0 << 1			# LN: 291 | 
1934  	 04E5	 98D40000		ymem[i0] = a0h			# LN: 291 | 
1935  	 04E6				cline_291_0:			/* LN: 293 | CYCLE: 0 | RULES: () */ 
1936  	 04E6	 B0040000		i0 = xmem[_leftOutput + 0]			# LN: 293 | 
1937  	 04E7	 00007FFF		nop #empty cycle
1938  	 04E8	 02087FFF		i0 += 1			# LN: 293 | 
1939  	 04E9	 B0440000		xmem[_leftOutput + 0] = i0			# LN: 293 | 
1940  	 04EA				cline_293_0:			/* LN: 294 | CYCLE: 0 | RULES: () */ 
1941  	 04EA	 B0040000		i0 = xmem[_rightOutput + 0]			# LN: 294 | 
1942  	 04EB	 00007FFF		nop #empty cycle
1943  	 04EC	 02087FFF		i0 += 1			# LN: 294 | 
1944  	 04ED	 B0440000		xmem[_rightOutput + 0] = i0			# LN: 294 | 
1945  	 04EE				cline_294_0:			/* LN: 295 | CYCLE: 0 | RULES: () */ 
1946  	 04EE	 B0040000		i0 = xmem[_rsOutput + 0]			# LN: 295 | 
1947  	 04EF	 00007FFF		nop #empty cycle
1948  	 04F0	 02087FFF		i0 += 1			# LN: 295 | 
1949  	 04F1	 B0440000		xmem[_rsOutput + 0] = i0			# LN: 295 | 
1950  	 04F2				cline_295_0:			/* LN: 296 | CYCLE: 0 | RULES: () */ 
1951  	 04F2	 B0040000		i0 = xmem[_centralOutput + 0]			# LN: 296 | 
1952  	 04F3	 00007FFF		nop #empty cycle
1953  	 04F4	 02087FFF		i0 += 1			# LN: 296 | 
1954  	 04F5	 B0440000		xmem[_centralOutput + 0] = i0			# LN: 296 | 
1955  	 04F6				cline_296_0:			/* LN: 297 | CYCLE: 0 | RULES: () */ 
1956  	 04F6	 B0040000		i0 = xmem[_lsOutput + 0]			# LN: 297 | 
1957  	 04F7	 00007FFF		nop #empty cycle
1958  	 04F8	 02087FFF		i0 += 1			# LN: 297 | 
1959  	 04F9	 B0440000		xmem[_lsOutput + 0] = i0			# LN: 297 | 
1960  	 04FA				cline_297_0:			/* LN: 276 | CYCLE: 0 | RULES: () */ 
1961  	 04FA				init_latch_label_8:			/* LN: 298 | CYCLE: 0 | RULES: () */ 
1962  	 04FA	 88040000		a0 = xmem[_j + 0]			# LN: 276 | 
1963  	 04FB	 894A0001		uhalfword(a1) = (0x1)			# LN: 276 | 
1964  	 04FC	 00004408		a0 = a0 + a1			# LN: 276 | 
1965  	 04FD	 98440000		xmem[_j + 0] = a0h			# LN: 276 | 
1966  	 04FE	 80080493		jmp (for_8)			# LN: 276 | 
1967  	 04FF				cline_276_1:			/* LN: 299 | CYCLE: 0 | RULES: () */ 
1968  	 04FF				for_end_8:			/* LN: 276 | CYCLE: 0 | RULES: () */ 
1969  	 04FF	 A0050020		i0 = (0) + (_sampleBuffer + 32)			# LN: 299 | 
1970  	 0500	 A1050020		i1 = (0) + (_sampleBuffer + 32)			# LN: 299 | 
1971  	 0501	 80880009		call (_gst_audio_invert_transform)			# LN: 299 | 
1972  	 0502				cline_299_0:			/* LN: 300 | CYCLE: 0 | RULES: () */ 
1973  	 0502	 A0050000		i0 = (0) + (_sampleBuffer + 0)			# LN: 300 | 
1974  	 0503	 A1050000		i1 = (0) + (_sampleBuffer + 0)			# LN: 300 | 
1975  	 0504	 80880009		call (_gst_audio_invert_transform)			# LN: 300 | 
1976  	 0505				cline_300_0:			/* LN: 301 | CYCLE: 0 | RULES: () */ 
1977  	 0505	 80080506		jmp (switch_end_4)			# LN: 301 | 
1978  	 0506				cline_301_0:			/* LN: 304 | CYCLE: 0 | RULES: () */ 
1979  	 0506				switch_end_4:			/* LN: 244 | CYCLE: 0 | RULES: () */ 
1980  	 0506	 80080507		jmp (switch_end_0)			# LN: 304 | 
1981  	 0507				cline_304_0:			/* LN: 307 | CYCLE: 0 | RULES: () */ 
1982  	 0507				switch_end_0:			/* LN: 48 | CYCLE: 0 | RULES: () */ 
1983  	 0507	 80080508		jmp (__epilogue_224)			# LN: 307 | 
1984  	 0508				__epilogue_224:			/* LN: 307 | CYCLE: 0 | RULES: () */ 
1985  	 0508	 02177FFF		i7 -= 1			# LN: 307 | 
1986  	 0509	 81880000		ret			# LN: 307 | 
1987  						(null)
				 SYMBOL TABLE 

    Name                                                                                    Type                  Value 

_COMMON_INC_PATH_                                                               					 Define                 "C:/CirrusDSP/crystal32/common/inc/"
_DSP_                                                                           					 Define                 "a"
_INPUT_GAIN                                                                     			  Public Relocatable       main_GEN_0000:0000H
_INPUT_MODE0_C                                                                  			  Public Relocatable       main_GEN_0001:0000H
_INPUT_MODE0_LS                                                                 			  Public Relocatable       main_GEN_0002:0000H
_INPUT_MODE1_C                                                                  			  Public Relocatable       main_GEN_0003:0000H
_INPUT_MODE1_LS                                                                 			  Public Relocatable       main_GEN_0004:0000H
_LOCAL_INC_PATH_                                                                					 Define                 "inc/"
_LOCAL_SRC_PATH_                                                                					 Define                 "src/"
_MUI_VERSION_                                                                   					 Define                 "020000"
_OVLY_                                                                          					 Define                 "standalone"
_OVLY_REVISION_                                                                 					 Define                 "020000"
_ROUTER_INC_PATH_                                                               					 Define                 "rom_inc/"
_SLOT_                                                                          					 Define                 "0"
_TARGET_FAMILY_                                                                 					 Define                 "crystal32"
_TOOLS_VERSION_                                                                 					 Define                 "0x0701"
_VERSION_                                                                       					 Define                 "00"
__CASM_VER__                                                                    			  Unused Variable		        0 (701H)
__div                                                                           					 External   
__epilogue_220                                                                  			         Relocatable         main_GEN_0032:0007H
__epilogue_222                                                                  			         Relocatable         main_GEN_0032:004EH
__epilogue_224                                                                  			         Relocatable         main_GEN_0032:0508H
__epilogue_226                                                                  			         Relocatable         main_GEN_0032:00F8H
__extractedConst_0_1                                                            			         Relocatable         main_GEN_0005:0000H
__extractedConst_1_1                                                            			         Relocatable         main_GEN_0006:0000H
__extractedConst_2_1                                                            			         Relocatable         main_GEN_0007:0000H
__int_to_laccum                                                                 					 External   
__mul_sat_laccum                                                                					 External   
__start                                                                         					 External   
_audio_invert_init                                                              			  Public Relocatable       main_GEN_0032:0000H
_centralOutput                                                                  			  Public Relocatable       main_GEN_0008:0000H
_cl_wavread_bits_per_sample                                                     					 External   
_cl_wavread_close                                                               					 External   
_cl_wavread_frame_rate                                                          					 External   
_cl_wavread_number_of_frames                                                    					 External   
_cl_wavread_open                                                                					 External   
_cl_wavread_recvsample                                                          					 External   
_cl_wavwrite_close                                                              					 External   
_cl_wavwrite_open                                                               					 External   
_cl_wavwrite_sendsample                                                         					 External   
_data                                                                           			  Public Relocatable       main_GEN_0009:0000H
_decibels                                                                       			  Public Relocatable       main_GEN_0010:0000H
_dry                                                                            			  Public Relocatable       main_GEN_0011:0000H
_gst_audio_invert_transform                                                     			  Public Relocatable       main_GEN_0032:0009H
_i                                                                              			  Public Relocatable       main_GEN_0012:0000H
_input_gain                                                                     			  Public Relocatable       main_GEN_0013:0000H
_j                                                                              			  Public Relocatable       main_GEN_0014:0000H
_k                                                                              			  Public Relocatable       main_GEN_0015:0000H
_leftOutput                                                                     			  Public Relocatable       main_GEN_0016:0000H
_lsOutput                                                                       			  Public Relocatable       main_GEN_0017:0000H
_main                                                                           			  Public Relocatable       main_GEN_0032:0051H
_mode_switch                                                                    			  Public Relocatable       main_GEN_0018:0000H
_outputMode                                                                     			  Public Relocatable       main_GEN_0019:0000H
_pEnd                                                                           			  Public Relocatable       main_GEN_0020:0000H
_printf                                                                         					 External   
_processing                                                                     			  Public Relocatable       main_GEN_0032:00FBH
_rightOutput                                                                    			  Public Relocatable       main_GEN_0021:0000H
_rsOutput                                                                       			  Public Relocatable       main_GEN_0022:0000H
_sampleBuffer                                                                   			  Public Relocatable       main_GEN_0023:0000H
_strcpy                                                                         					 External   
_string_const_0                                                                 			         Relocatable         main_GEN_0024:0000H
_string_const_1                                                                 			         Relocatable         main_GEN_0025:0000H
_string_const_2                                                                 			         Relocatable         main_GEN_0026:0000H
_string_const_3                                                                 			         Relocatable         main_GEN_0027:0000H
_tempBuffer                                                                     			  Public Relocatable       main_GEN_0028:0000H
_tmp                                                                            			  Public Relocatable       main_GEN_0029:0000H
_tmp1                                                                           			  Public Relocatable       main_GEN_0030:0000H
_val                                                                            			  Public Relocatable       main_GEN_0031:0000H
case_0                                                                          			         Relocatable         main_GEN_0032:0117H
case_1                                                                          			         Relocatable         main_GEN_0032:011FH
case_10                                                                         			         Relocatable         main_GEN_0032:041CH
case_11                                                                         			         Relocatable         main_GEN_0032:0491H
case_2                                                                          			         Relocatable         main_GEN_0032:01A0H
case_3                                                                          			         Relocatable         main_GEN_0032:0222H
case_4                                                                          			         Relocatable         main_GEN_0032:022AH
case_5                                                                          			         Relocatable         main_GEN_0032:029CH
case_6                                                                          			         Relocatable         main_GEN_0032:030FH
case_7                                                                          			         Relocatable         main_GEN_0032:0317H
case_8                                                                          			         Relocatable         main_GEN_0032:0395H
case_9                                                                          			         Relocatable         main_GEN_0032:0414H
cline_100_0                                                                     			  Unused Relocatable        main_GEN_0032:01FBH
cline_101_0                                                                     			  Unused Relocatable        main_GEN_0032:0201H
cline_103_0                                                                     			  Unused Relocatable        main_GEN_0032:0205H
cline_104_0                                                                     			  Unused Relocatable        main_GEN_0032:0209H
cline_105_0                                                                     			  Unused Relocatable        main_GEN_0032:020DH
cline_106_0                                                                     			  Unused Relocatable        main_GEN_0032:0211H
cline_107_0                                                                     			  Unused Relocatable        main_GEN_0032:0215H
cline_110_0                                                                     			  Unused Relocatable        main_GEN_0032:021DH
cline_111_0                                                                     			  Unused Relocatable        main_GEN_0032:0220H
cline_112_0                                                                     			  Unused Relocatable        main_GEN_0032:0221H
cline_115_0                                                                     			  Unused Relocatable        main_GEN_0032:0222H
cline_118_0                                                                     			  Unused Relocatable        main_GEN_0032:022AH
cline_121_0                                                                     			  Unused Relocatable        main_GEN_0032:0230H
cline_121_1                                                                     			  Unused Relocatable        main_GEN_0032:0295H
cline_123_0                                                                     			  Unused Relocatable        main_GEN_0032:0237H
cline_124_0                                                                     			  Unused Relocatable        main_GEN_0032:023DH
cline_125_0                                                                     			  Unused Relocatable        main_GEN_0032:0244H
cline_126_0                                                                     			  Unused Relocatable        main_GEN_0032:0248H
cline_127_0                                                                     			  Unused Relocatable        main_GEN_0032:024EH
cline_128_0                                                                     			  Unused Relocatable        main_GEN_0032:0254H
cline_129_0                                                                     			  Unused Relocatable        main_GEN_0032:025BH
cline_130_0                                                                     			  Unused Relocatable        main_GEN_0032:025FH
cline_131_0                                                                     			  Unused Relocatable        main_GEN_0032:0265H
cline_133_0                                                                     			  Unused Relocatable        main_GEN_0032:026CH
cline_134_0                                                                     			  Unused Relocatable        main_GEN_0032:0272H
cline_135_0                                                                     			  Unused Relocatable        main_GEN_0032:0276H
cline_136_0                                                                     			  Unused Relocatable        main_GEN_0032:027CH
cline_138_0                                                                     			  Unused Relocatable        main_GEN_0032:0280H
cline_139_0                                                                     			  Unused Relocatable        main_GEN_0032:0284H
cline_140_0                                                                     			  Unused Relocatable        main_GEN_0032:0288H
cline_141_0                                                                     			  Unused Relocatable        main_GEN_0032:028CH
cline_142_0                                                                     			  Unused Relocatable        main_GEN_0032:0290H
cline_144_0                                                                     			  Unused Relocatable        main_GEN_0032:0298H
cline_145_0                                                                     			  Unused Relocatable        main_GEN_0032:029BH
cline_146_0                                                                     			  Unused Relocatable        main_GEN_0032:029CH
cline_150_0                                                                     			  Unused Relocatable        main_GEN_0032:02A2H
cline_150_1                                                                     			  Unused Relocatable        main_GEN_0032:0307H
cline_152_0                                                                     			  Unused Relocatable        main_GEN_0032:02A9H
cline_153_0                                                                     			  Unused Relocatable        main_GEN_0032:02AFH
cline_154_0                                                                     			  Unused Relocatable        main_GEN_0032:02B6H
cline_155_0                                                                     			  Unused Relocatable        main_GEN_0032:02BAH
cline_156_0                                                                     			  Unused Relocatable        main_GEN_0032:02C0H
cline_157_0                                                                     			  Unused Relocatable        main_GEN_0032:02C6H
cline_158_0                                                                     			  Unused Relocatable        main_GEN_0032:02CDH
cline_159_0                                                                     			  Unused Relocatable        main_GEN_0032:02D1H
cline_160_0                                                                     			  Unused Relocatable        main_GEN_0032:02D7H
cline_162_0                                                                     			  Unused Relocatable        main_GEN_0032:02DEH
cline_163_0                                                                     			  Unused Relocatable        main_GEN_0032:02E4H
cline_164_0                                                                     			  Unused Relocatable        main_GEN_0032:02E8H
cline_165_0                                                                     			  Unused Relocatable        main_GEN_0032:02EEH
cline_167_0                                                                     			  Unused Relocatable        main_GEN_0032:02F2H
cline_168_0                                                                     			  Unused Relocatable        main_GEN_0032:02F6H
cline_169_0                                                                     			  Unused Relocatable        main_GEN_0032:02FAH
cline_16_0                                                                      			  Unused Relocatable        main_GEN_0032:0002H
cline_170_0                                                                     			  Unused Relocatable        main_GEN_0032:02FEH
cline_171_0                                                                     			  Unused Relocatable        main_GEN_0032:0302H
cline_173_0                                                                     			  Unused Relocatable        main_GEN_0032:030AH
cline_174_0                                                                     			  Unused Relocatable        main_GEN_0032:030DH
cline_175_0                                                                     			  Unused Relocatable        main_GEN_0032:030EH
cline_178_0                                                                     			  Unused Relocatable        main_GEN_0032:030FH
cline_181_0                                                                     			  Unused Relocatable        main_GEN_0032:0317H
cline_184_0                                                                     			  Unused Relocatable        main_GEN_0032:031DH
cline_184_1                                                                     			  Unused Relocatable        main_GEN_0032:038EH
cline_186_0                                                                     			  Unused Relocatable        main_GEN_0032:0324H
cline_187_0                                                                     			  Unused Relocatable        main_GEN_0032:032AH
cline_188_0                                                                     			  Unused Relocatable        main_GEN_0032:0331H
cline_189_0                                                                     			  Unused Relocatable        main_GEN_0032:0335H
cline_18_0                                                                      			  Unused Relocatable        main_GEN_0032:0004H
cline_190_0                                                                     			  Unused Relocatable        main_GEN_0032:033BH
cline_191_0                                                                     			  Unused Relocatable        main_GEN_0032:0341H
cline_192_0                                                                     			  Unused Relocatable        main_GEN_0032:0348H
cline_193_0                                                                     			  Unused Relocatable        main_GEN_0032:034FH
cline_194_0                                                                     			  Unused Relocatable        main_GEN_0032:0355H
cline_196_0                                                                     			  Unused Relocatable        main_GEN_0032:035CH
cline_197_0                                                                     			  Unused Relocatable        main_GEN_0032:0362H
cline_198_0                                                                     			  Unused Relocatable        main_GEN_0032:036FH
cline_199_0                                                                     			  Unused Relocatable        main_GEN_0032:0375H
cline_19_0                                                                      			  Unused Relocatable        main_GEN_0032:0006H
cline_201_0                                                                     			  Unused Relocatable        main_GEN_0032:0379H
cline_202_0                                                                     			  Unused Relocatable        main_GEN_0032:037DH
cline_203_0                                                                     			  Unused Relocatable        main_GEN_0032:0381H
cline_204_0                                                                     			  Unused Relocatable        main_GEN_0032:0385H
cline_205_0                                                                     			  Unused Relocatable        main_GEN_0032:0389H
cline_207_0                                                                     			  Unused Relocatable        main_GEN_0032:0391H
cline_208_0                                                                     			  Unused Relocatable        main_GEN_0032:0394H
cline_209_0                                                                     			  Unused Relocatable        main_GEN_0032:0395H
cline_213_0                                                                     			  Unused Relocatable        main_GEN_0032:039BH
cline_213_1                                                                     			  Unused Relocatable        main_GEN_0032:040CH
cline_215_0                                                                     			  Unused Relocatable        main_GEN_0032:03A2H
cline_216_0                                                                     			  Unused Relocatable        main_GEN_0032:03A8H
cline_217_0                                                                     			  Unused Relocatable        main_GEN_0032:03AFH
cline_218_0                                                                     			  Unused Relocatable        main_GEN_0032:03B3H
cline_219_0                                                                     			  Unused Relocatable        main_GEN_0032:03B9H
cline_21_0                                                                      			  Unused Relocatable        main_GEN_0032:0010H
cline_220_0                                                                     			  Unused Relocatable        main_GEN_0032:03BFH
cline_221_0                                                                     			  Unused Relocatable        main_GEN_0032:03C6H
cline_222_0                                                                     			  Unused Relocatable        main_GEN_0032:03CDH
cline_223_0                                                                     			  Unused Relocatable        main_GEN_0032:03D3H
cline_225_0                                                                     			  Unused Relocatable        main_GEN_0032:03DAH
cline_226_0                                                                     			  Unused Relocatable        main_GEN_0032:03E0H
cline_227_0                                                                     			  Unused Relocatable        main_GEN_0032:03EDH
cline_228_0                                                                     			  Unused Relocatable        main_GEN_0032:03F3H
cline_230_0                                                                     			  Unused Relocatable        main_GEN_0032:03F7H
cline_231_0                                                                     			  Unused Relocatable        main_GEN_0032:03FBH
cline_232_0                                                                     			  Unused Relocatable        main_GEN_0032:03FFH
cline_233_0                                                                     			  Unused Relocatable        main_GEN_0032:0403H
cline_234_0                                                                     			  Unused Relocatable        main_GEN_0032:0407H
cline_236_0                                                                     			  Unused Relocatable        main_GEN_0032:040FH
cline_237_0                                                                     			  Unused Relocatable        main_GEN_0032:0412H
cline_238_0                                                                     			  Unused Relocatable        main_GEN_0032:0413H
cline_241_0                                                                     			  Unused Relocatable        main_GEN_0032:0414H
cline_244_0                                                                     			  Unused Relocatable        main_GEN_0032:041CH
cline_247_0                                                                     			  Unused Relocatable        main_GEN_0032:0422H
cline_247_1                                                                     			  Unused Relocatable        main_GEN_0032:048AH
cline_249_0                                                                     			  Unused Relocatable        main_GEN_0032:0429H
cline_24_0                                                                      			  Unused Relocatable        main_GEN_0032:0015H
cline_250_0                                                                     			  Unused Relocatable        main_GEN_0032:042FH
cline_251_0                                                                     			  Unused Relocatable        main_GEN_0032:0436H
cline_252_0                                                                     			  Unused Relocatable        main_GEN_0032:043DH
cline_253_0                                                                     			  Unused Relocatable        main_GEN_0032:0443H
cline_254_0                                                                     			  Unused Relocatable        main_GEN_0032:0449H
cline_255_0                                                                     			  Unused Relocatable        main_GEN_0032:0450H
cline_256_0                                                                     			  Unused Relocatable        main_GEN_0032:0454H
cline_257_0                                                                     			  Unused Relocatable        main_GEN_0032:045AH
cline_259_0                                                                     			  Unused Relocatable        main_GEN_0032:0461H
cline_25_0                                                                      			  Unused Relocatable        main_GEN_0032:001BH
cline_260_0                                                                     			  Unused Relocatable        main_GEN_0032:0467H
cline_261_0                                                                     			  Unused Relocatable        main_GEN_0032:046BH
cline_262_0                                                                     			  Unused Relocatable        main_GEN_0032:0471H
cline_264_0                                                                     			  Unused Relocatable        main_GEN_0032:0475H
cline_265_0                                                                     			  Unused Relocatable        main_GEN_0032:0479H
cline_266_0                                                                     			  Unused Relocatable        main_GEN_0032:047DH
cline_267_0                                                                     			  Unused Relocatable        main_GEN_0032:0481H
cline_268_0                                                                     			  Unused Relocatable        main_GEN_0032:0485H
cline_270_0                                                                     			  Unused Relocatable        main_GEN_0032:048DH
cline_271_0                                                                     			  Unused Relocatable        main_GEN_0032:0490H
cline_272_0                                                                     			  Unused Relocatable        main_GEN_0032:0491H
cline_276_0                                                                     			  Unused Relocatable        main_GEN_0032:0497H
cline_276_1                                                                     			  Unused Relocatable        main_GEN_0032:04FFH
cline_278_0                                                                     			  Unused Relocatable        main_GEN_0032:049EH
cline_279_0                                                                     			  Unused Relocatable        main_GEN_0032:04A4H
cline_280_0                                                                     			  Unused Relocatable        main_GEN_0032:04ABH
cline_281_0                                                                     			  Unused Relocatable        main_GEN_0032:04B2H
cline_282_0                                                                     			  Unused Relocatable        main_GEN_0032:04B8H
cline_283_0                                                                     			  Unused Relocatable        main_GEN_0032:04BEH
cline_284_0                                                                     			  Unused Relocatable        main_GEN_0032:04C5H
cline_285_0                                                                     			  Unused Relocatable        main_GEN_0032:04C9H
cline_286_0                                                                     			  Unused Relocatable        main_GEN_0032:04CFH
cline_288_0                                                                     			  Unused Relocatable        main_GEN_0032:04D6H
cline_289_0                                                                     			  Unused Relocatable        main_GEN_0032:04DCH
cline_28_0                                                                      			  Unused Relocatable        main_GEN_0032:001FH
cline_28_1                                                                      			  Unused Relocatable        main_GEN_0032:004DH
cline_290_0                                                                     			  Unused Relocatable        main_GEN_0032:04E0H
cline_291_0                                                                     			  Unused Relocatable        main_GEN_0032:04E6H
cline_293_0                                                                     			  Unused Relocatable        main_GEN_0032:04EAH
cline_294_0                                                                     			  Unused Relocatable        main_GEN_0032:04EEH
cline_295_0                                                                     			  Unused Relocatable        main_GEN_0032:04F2H
cline_296_0                                                                     			  Unused Relocatable        main_GEN_0032:04F6H
cline_297_0                                                                     			  Unused Relocatable        main_GEN_0032:04FAH
cline_299_0                                                                     			  Unused Relocatable        main_GEN_0032:0502H
cline_300_0                                                                     			  Unused Relocatable        main_GEN_0032:0505H
cline_301_0                                                                     			  Unused Relocatable        main_GEN_0032:0506H
cline_304_0                                                                     			  Unused Relocatable        main_GEN_0032:0507H
cline_30_0                                                                      			  Unused Relocatable        main_GEN_0032:0026H
cline_310_0                                                                     			  Unused Relocatable        main_GEN_0032:0058H
cline_31_0                                                                      			  Unused Relocatable        main_GEN_0032:0033H
cline_324_0                                                                     			  Unused Relocatable        main_GEN_0032:005BH
cline_325_0                                                                     			  Unused Relocatable        main_GEN_0032:0060H
cline_326_0                                                                     			  Unused Relocatable        main_GEN_0032:0064H
cline_328_0                                                                     			  Unused Relocatable        main_GEN_0032:0066H
cline_329_0                                                                     			  Unused Relocatable        main_GEN_0032:0068H
cline_32_0                                                                      			  Unused Relocatable        main_GEN_0032:0038H
cline_335_0                                                                     			  Unused Relocatable        main_GEN_0032:006DH
cline_336_0                                                                     			  Unused Relocatable        main_GEN_0032:0072H
cline_337_0                                                                     			  Unused Relocatable        main_GEN_0032:0077H
cline_33_0                                                                      			  Unused Relocatable        main_GEN_0032:0042H
cline_342_0                                                                     			  Unused Relocatable        main_GEN_0032:007AH
cline_343_0                                                                     			  Unused Relocatable        main_GEN_0032:0084H
cline_344_0                                                                     			  Unused Relocatable        main_GEN_0032:0088H
cline_346_0                                                                     			  Unused Relocatable        main_GEN_0032:008AH
cline_347_0                                                                     			  Unused Relocatable        main_GEN_0032:008CH
cline_34_0                                                                      			  Unused Relocatable        main_GEN_0032:0047H
cline_354_0                                                                     			  Unused Relocatable        main_GEN_0032:008DH
cline_365_0                                                                     			  Unused Relocatable        main_GEN_0032:0093H
cline_367_0                                                                     			  Unused Relocatable        main_GEN_0032:009CH
cline_367_1                                                                     			  Unused Relocatable        main_GEN_0032:00F0H
cline_369_0                                                                     			  Unused Relocatable        main_GEN_0032:00A0H
cline_369_1                                                                     			  Unused Relocatable        main_GEN_0032:00C2H
cline_371_0                                                                     			  Unused Relocatable        main_GEN_0032:00A4H
cline_371_1                                                                     			  Unused Relocatable        main_GEN_0032:00BCH
cline_373_0                                                                     			  Unused Relocatable        main_GEN_0032:00A9H
cline_374_0                                                                     			  Unused Relocatable        main_GEN_0032:00B6H
cline_382_0                                                                     			  Unused Relocatable        main_GEN_0032:00C3H
cline_385_0                                                                     			  Unused Relocatable        main_GEN_0032:00C7H
cline_385_1                                                                     			  Unused Relocatable        main_GEN_0032:00E9H
cline_387_0                                                                     			  Unused Relocatable        main_GEN_0032:00CBH
cline_387_1                                                                     			  Unused Relocatable        main_GEN_0032:00E3H
cline_389_0                                                                     			  Unused Relocatable        main_GEN_0032:00D8H
cline_390_0                                                                     			  Unused Relocatable        main_GEN_0032:00DDH
cline_398_0                                                                     			  Unused Relocatable        main_GEN_0032:00F3H
cline_399_0                                                                     			  Unused Relocatable        main_GEN_0032:00F6H
cline_402_0                                                                     			  Unused Relocatable        main_GEN_0032:00F8H
cline_40_0                                                                      			  Unused Relocatable        main_GEN_0032:00FDH
cline_42_0                                                                      			  Unused Relocatable        main_GEN_0032:00FFH
cline_43_0                                                                      			  Unused Relocatable        main_GEN_0032:0101H
cline_44_0                                                                      			  Unused Relocatable        main_GEN_0032:0103H
cline_45_0                                                                      			  Unused Relocatable        main_GEN_0032:0105H
cline_46_0                                                                      			  Unused Relocatable        main_GEN_0032:0107H
cline_48_0                                                                      			  Unused Relocatable        main_GEN_0032:0117H
cline_51_0                                                                      			  Unused Relocatable        main_GEN_0032:011FH
cline_54_0                                                                      			  Unused Relocatable        main_GEN_0032:0125H
cline_54_1                                                                      			  Unused Relocatable        main_GEN_0032:0199H
cline_56_0                                                                      			  Unused Relocatable        main_GEN_0032:012CH
cline_57_0                                                                      			  Unused Relocatable        main_GEN_0032:0132H
cline_58_0                                                                      			  Unused Relocatable        main_GEN_0032:0139H
cline_59_0                                                                      			  Unused Relocatable        main_GEN_0032:0140H
cline_60_0                                                                      			  Unused Relocatable        main_GEN_0032:0146H
cline_61_0                                                                      			  Unused Relocatable        main_GEN_0032:014CH
cline_62_0                                                                      			  Unused Relocatable        main_GEN_0032:0153H
cline_63_0                                                                      			  Unused Relocatable        main_GEN_0032:015AH
cline_64_0                                                                      			  Unused Relocatable        main_GEN_0032:0160H
cline_66_0                                                                      			  Unused Relocatable        main_GEN_0032:0167H
cline_67_0                                                                      			  Unused Relocatable        main_GEN_0032:016DH
cline_68_0                                                                      			  Unused Relocatable        main_GEN_0032:017AH
cline_69_0                                                                      			  Unused Relocatable        main_GEN_0032:0180H
cline_71_0                                                                      			  Unused Relocatable        main_GEN_0032:0184H
cline_72_0                                                                      			  Unused Relocatable        main_GEN_0032:0188H
cline_73_0                                                                      			  Unused Relocatable        main_GEN_0032:018CH
cline_74_0                                                                      			  Unused Relocatable        main_GEN_0032:0190H
cline_75_0                                                                      			  Unused Relocatable        main_GEN_0032:0194H
cline_78_0                                                                      			  Unused Relocatable        main_GEN_0032:019CH
cline_79_0                                                                      			  Unused Relocatable        main_GEN_0032:019FH
cline_82_0                                                                      			  Unused Relocatable        main_GEN_0032:01A0H
cline_86_0                                                                      			  Unused Relocatable        main_GEN_0032:01A6H
cline_86_1                                                                      			  Unused Relocatable        main_GEN_0032:021AH
cline_88_0                                                                      			  Unused Relocatable        main_GEN_0032:01ADH
cline_89_0                                                                      			  Unused Relocatable        main_GEN_0032:01B3H
cline_90_0                                                                      			  Unused Relocatable        main_GEN_0032:01BAH
cline_91_0                                                                      			  Unused Relocatable        main_GEN_0032:01C1H
cline_92_0                                                                      			  Unused Relocatable        main_GEN_0032:01C7H
cline_93_0                                                                      			  Unused Relocatable        main_GEN_0032:01CDH
cline_94_0                                                                      			  Unused Relocatable        main_GEN_0032:01D4H
cline_95_0                                                                      			  Unused Relocatable        main_GEN_0032:01DBH
cline_96_0                                                                      			  Unused Relocatable        main_GEN_0032:01E1H
cline_98_0                                                                      			  Unused Relocatable        main_GEN_0032:01E8H
cline_99_0                                                                      			  Unused Relocatable        main_GEN_0032:01EEH
dummy                                                                           			  Unused Number				     0 (0H)
else_0                                                                          			         Relocatable         main_GEN_0032:0068H
else_1                                                                          			         Relocatable         main_GEN_0032:008CH
endif_0                                                                         			  Unused Relocatable        main_GEN_0032:0068H
endif_1                                                                         			  Unused Relocatable        main_GEN_0032:008CH
for_1                                                                           			         Relocatable         main_GEN_0032:0121H
for_2                                                                           			         Relocatable         main_GEN_0032:01A2H
for_3                                                                           			         Relocatable         main_GEN_0032:022CH
for_4                                                                           			         Relocatable         main_GEN_0032:029EH
for_5                                                                           			         Relocatable         main_GEN_0032:0319H
for_6                                                                           			         Relocatable         main_GEN_0032:0397H
for_7                                                                           			         Relocatable         main_GEN_0032:041EH
for_8                                                                           			         Relocatable         main_GEN_0032:0493H
for_9                                                                           			         Relocatable         main_GEN_0032:0096H
for_end_0                                                                       			  Unused Relocatable        main_GEN_0032:004DH
for_end_1                                                                       			         Relocatable         main_GEN_0032:0199H
for_end_10                                                                      			  Unused Relocatable        main_GEN_0032:00C2H
for_end_11                                                                      			  Unused Relocatable        main_GEN_0032:00BCH
for_end_12                                                                      			  Unused Relocatable        main_GEN_0032:00E9H
for_end_13                                                                      			  Unused Relocatable        main_GEN_0032:00E3H
for_end_2                                                                       			         Relocatable         main_GEN_0032:021AH
for_end_3                                                                       			         Relocatable         main_GEN_0032:0295H
for_end_4                                                                       			         Relocatable         main_GEN_0032:0307H
for_end_5                                                                       			         Relocatable         main_GEN_0032:038EH
for_end_6                                                                       			         Relocatable         main_GEN_0032:040CH
for_end_7                                                                       			         Relocatable         main_GEN_0032:048AH
for_end_8                                                                       			         Relocatable         main_GEN_0032:04FFH
for_end_9                                                                       			         Relocatable         main_GEN_0032:00F0H
init_latch_label_0                                                              			  Unused Relocatable        main_GEN_0032:0047H
init_latch_label_1                                                              			  Unused Relocatable        main_GEN_0032:0194H
init_latch_label_10                                                             			  Unused Relocatable        main_GEN_0032:00BCH
init_latch_label_11                                                             			  Unused Relocatable        main_GEN_0032:00DDH
init_latch_label_12                                                             			  Unused Relocatable        main_GEN_0032:00E3H
init_latch_label_13                                                             			  Unused Relocatable        main_GEN_0032:00E9H
init_latch_label_2                                                              			  Unused Relocatable        main_GEN_0032:0215H
init_latch_label_3                                                              			  Unused Relocatable        main_GEN_0032:0290H
init_latch_label_4                                                              			  Unused Relocatable        main_GEN_0032:0302H
init_latch_label_5                                                              			  Unused Relocatable        main_GEN_0032:0389H
init_latch_label_6                                                              			  Unused Relocatable        main_GEN_0032:0407H
init_latch_label_7                                                              			  Unused Relocatable        main_GEN_0032:0485H
init_latch_label_8                                                              			  Unused Relocatable        main_GEN_0032:04FAH
init_latch_label_9                                                              			  Unused Relocatable        main_GEN_0032:00B6H
label_begin_92                                                                  			  Unused Relocatable        main_GEN_0032:001FH
label_begin_93                                                                  			  Unused Relocatable        main_GEN_0032:00A4H
label_begin_94                                                                  			  Unused Relocatable        main_GEN_0032:00A0H
label_begin_95                                                                  			  Unused Relocatable        main_GEN_0032:00CBH
label_begin_96                                                                  			  Unused Relocatable        main_GEN_0032:00C7H
label_end_92                                                                    			         Relocatable         main_GEN_0032:004CH
label_end_93                                                                    			         Relocatable         main_GEN_0032:00BBH
label_end_94                                                                    			         Relocatable         main_GEN_0032:00C1H
label_end_95                                                                    			         Relocatable         main_GEN_0032:00E2H
label_end_96                                                                    			         Relocatable         main_GEN_0032:00E8H
switch_0                                                                        			  Unused Relocatable        main_GEN_0032:0107H
switch_1                                                                        			  Unused Relocatable        main_GEN_0032:0117H
switch_2                                                                        			  Unused Relocatable        main_GEN_0032:0222H
switch_3                                                                        			  Unused Relocatable        main_GEN_0032:030FH
switch_4                                                                        			  Unused Relocatable        main_GEN_0032:0414H
switch_end_0                                                                    			         Relocatable         main_GEN_0032:0507H
switch_end_1                                                                    			         Relocatable         main_GEN_0032:0221H
switch_end_2                                                                    			         Relocatable         main_GEN_0032:030EH
switch_end_3                                                                    			         Relocatable         main_GEN_0032:0413H
switch_end_4                                                                    			         Relocatable         main_GEN_0032:0506H

	       SEGMENTS:

Size			  Name										 Class
0000H	 __INIT                                  			 CODE                                    
0001H	 main_GEN_0000                           			 X_OVLY                                  
0001H	 main_GEN_0001                           			 X_OVLY                                  
0001H	 main_GEN_0002                           			 X_OVLY                                  
0001H	 main_GEN_0003                           			 X_OVLY                                  
0001H	 main_GEN_0004                           			 X_OVLY                                  
0001H	 main_GEN_0005                           			 X_OVLY                                  
0001H	 main_GEN_0006                           			 X_OVLY                                  
0001H	 main_GEN_0007                           			 X_OVLY                                  
0001H	 main_GEN_0008                           			 X_OVLY                                  
0003H	 main_GEN_0009                           			 X_OVLY                                  
0032H	 main_GEN_0010                           			 X_OVLY                                  
0001H	 main_GEN_0011                           			 X_OVLY                                  
0001H	 main_GEN_0012                           			 X_OVLY                                  
0001H	 main_GEN_0013                           			 X_OVLY                                  
0001H	 main_GEN_0014                           			 X_OVLY                                  
0001H	 main_GEN_0015                           			 X_OVLY                                  
0001H	 main_GEN_0016                           			 X_OVLY                                  
0001H	 main_GEN_0017                           			 X_OVLY                                  
0001H	 main_GEN_0018                           			 X_OVLY                                  
0001H	 main_GEN_0019                           			 X_OVLY                                  
0001H	 main_GEN_0020                           			 X_OVLY                                  
0001H	 main_GEN_0021                           			 X_OVLY                                  
0001H	 main_GEN_0022                           			 X_OVLY                                  
0080H	 main_GEN_0023                           			 X_OVLY                                  
003EH	 main_GEN_0024                           			 X_OVLY                                  
0027H	 main_GEN_0025                           			 X_OVLY                                  
0043H	 main_GEN_0026                           			 X_OVLY                                  
0028H	 main_GEN_0027                           			 X_OVLY                                  
0080H	 main_GEN_0028                           			 X_OVLY                                  
0001H	 main_GEN_0029                           			 X_OVLY                                  
0001H	 main_GEN_0030                           			 X_OVLY                                  
0003H	 main_GEN_0031                           			 X_OVLY                                  
050AH	 main_GEN_0032                           			 CODE_OVLY                               
